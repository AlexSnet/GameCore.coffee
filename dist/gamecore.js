;(function(e,t,n){function i(n,s){if(!t[n]){if(!e[n]){var o=typeof require=="function"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error("Cannot find module '"+n+"'")}var u=t[n]={exports:{}};e[n][0].call(u.exports,function(t){var r=e[n][1][t];return i(r?r:t)},u,u.exports)}return t[n].exports}var r=typeof require=="function"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i})({1:[function(require,module,exports){
(function(){// Generated by CoffeeScript 1.6.3
var GameCore, Stage, UUID, context2d, support;

context2d = require("./core/context/2d");

support = require("./core/support");

UUID = require("./math/uuid");

Stage = require("./ui/stage");

/*
Game Core base class

@property {Stage} stage
@property {Boolean} fullScreen
@property {Boolean} paused
@property {Context} context
@property {Int} width
@property {Int} heigth
@property {DOMElement} renderer

@example How to create an game core 
    gc = new GameCore() # Creating core
    gc.renderer = document.body # Appends new canvas element to documents body

@example Making canvas full-sized
    gc = new GameCore() # Creating core
    gc.fullScreen = true
*/


GameCore = (function() {
  /*
  GameCore instancec archive
  */

  GameCore.cores = {};

  /*
  Start your application from here.
  
  @param {Object} options
  */


  function GameCore(options) {
    this.options = options != null ? options : {};
    /*
    In the first case we need to generate id for new instance, if it not
     present in options.
    */

    this.id = this.options.id || UUID.generateUniqueId();
    /*
    Setting up a canvas.
    If canvas doesn't present in options then create it.
    */

    this.options.canvas = this.options.canvas || this.createCanvas();
    /*
    Registrating GameCore instance in canvas ang GameCore global.
    */

    this.options.canvas.core = this;
    GameCore.cores[this.id] = this;
    /*
    Setting up framerate
    */

    this.setFramerate();
    this._frame = 0;
    /*
    Stages map
    */

    this._stages = {};
    Object.defineProperty(this, "stage", {
      get: function() {
        var stage;
        if (this._current_stage_id) {
          return this._stages[this._current_stage_id];
        } else {
          stage = new Stage;
          this._current_stage_id = stage.id;
          this.addStage(stage);
          return stage;
        }
      },
      set: function(stage) {
        if (!this._stages[stage.id]) {
          this.addStage(stage);
        }
        return this._current_stage_id = stage.id;
      }
    });
    /*
    */

    Object.defineProperty(this, "fullScreen", {
      get: function() {
        return this._in_the_fullscreen_now;
      },
      set: function(b) {
        if (b === true) {
          window.addEventListener("resize", this._fullScreen_resizer);
          this._in_the_fullscreen_now = true;
          return this.setSize(document.width, document.height);
        } else {
          window.removeEventListener("resize", this._fullScreen_resizer);
          this._in_the_fullscreen_now = false;
          return this.setSize(this.options.width, this.options.height);
        }
      }
    });
    this.fullScreen = this.options.fullScreen;
    /*
    */

    Object.defineProperty(this, "width", {
      get: function() {
        return this.options.canvas.width;
      },
      set: function(width) {
        this.options.canvas.width = width;
        return this.options.canvas.style.width = width + "px";
      }
    });
    /*
    */

    Object.defineProperty(this, "height", {
      get: function() {
        return this.options.canvas.height;
      },
      set: function(height) {
        this.options.canvas.height = height;
        return this.options.canvas.style.height = height + "px";
      }
    });
    if (this.fullScreen) {
      this.options.width = window.width;
      this.options.height = window.height;
    }
    this.setSize(this.options.width, this.options.height);
    /*
    Context element.
    Currently support only Context2d
    */

    Object.defineProperty(this, "context", {
      get: function() {
        if (!this._context) {
          this._context = new context2d({
            canvas: this.options.canvas
          });
        }
        return this._context;
      }
    });
    /*
    */

    Object.defineProperty(this, "paused", {
      get: function() {
        return this._paused || false;
      },
      set: function(paused) {
        return this._paused = paused ? true : false;
      }
    });
    /*
    Renderer element.
    */

    Object.defineProperty(this, "renderer", {
      get: function() {
        return this._parent_node || 'undefined';
      },
      set: function(node) {
        if (!node.tagName) {
          throw Error("Can render only on document elements");
        }
        node.appendChild(this.options.canvas);
        return this._parent_node = node;
      }
    });
    this._onEnterFrame();
  }

  /*
  */


  GameCore.prototype.addStage = function(stage, setCurrent) {
    if (setCurrent == null) {
      setCurrent = false;
    }
    this._stages[stage.id] = stage;
    if (setCurrent) {
      return this.stage = stage.id;
    }
  };

  /*
  Switch pause state
  */


  GameCore.prototype.pause = function() {
    return this.paused = !this.paused;
  };

  /*
  Set's framerate. Not usable at the moment...
  @param {Int} framerate
  @method setFramerate
  */


  GameCore.prototype.setFramerate = function(framerate) {
    if (framerate == null) {
      framerate = 60;
    }
    return window._FPS = framerate;
  };

  /*
  Set size of an canvas element.
  @param {Int} width
  @param {Int} height
  @method setSize
  */


  GameCore.prototype.setSize = function(width, height) {
    if (width == null) {
      width = 400;
    }
    if (height == null) {
      height = 300;
    }
    this.width = width;
    return this.height = height;
  };

  GameCore.prototype._fullScreen_resizer = function() {
    var gci;
    gci = this;
    return function(e) {
      return gci.setSize(window.width, window.height);
    };
  };

  /*
  Creates a canvas element
  @method createCanvas
  */


  GameCore.prototype.createCanvas = function() {
    var canvas;
    canvas = document.createElement('canvas');
    return canvas;
  };

  /*
  Call window's requestAnimationFrame.
  @method _onEnterFrame
  */


  GameCore.prototype._onEnterFrame = function(gci) {
    if (gci == null) {
      gci = this;
    }
    if (!this.paused) {
      gci._render(gci.stage);
    }
    return window.onEnterFrame(function() {
      return gci._onEnterFrame(gci);
    });
  };

  GameCore.prototype._render = function() {
    this._frame++;
    return this.context.render([this.stage]);
  };

  return GameCore;

})();

window.GameCore = window.GameCore || GameCore;

GameCore.exports = {
  UI: require("./ui/exports"),
  Math: require("./math/exports")
};

module.exports = GameCore;

/*
//@ sourceMappingURL=core.map
*/

})()
},{"./core/context/2d":2,"./core/support":3,"./math/exports":4,"./math/uuid":6,"./ui/exports":9,"./ui/stage":13}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Context2d;

Context2d = (function() {
  function Context2d(options) {
    this.setCanvas(options.canvas);
  }

  Context2d.prototype.setCanvas = function(canvas) {
    this.canvas = canvas;
    this.ctx = this.canvas.getContext('2d');
    return this;
  };

  Context2d.prototype.clear = function() {
    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
    return this;
  };

  Context2d.prototype.render = function(layers) {
    var layer, _i, _len, _results;
    if (layers == null) {
      layers = [];
    }
    this.clear();
    _results = [];
    for (_i = 0, _len = layers.length; _i < _len; _i++) {
      layer = layers[_i];
      _results.push(layer.render(this.ctx));
    }
    return _results;
  };

  return Context2d;

})();

module.exports = Context2d;

/*
//@ sourceMappingURL=2d.map
*/

},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var browserPrefix, prefix, userAgent;

prefix = function(name) {
  if (browserPrefix !== "") {
    name = name.charAt(0).toUpperCase() + name.slice(1);
  }
  return browserPrefix + name;
};

userAgent = navigator.userAgent;

browserPrefix = (userAgent.match(/opera/i) && "o") || (userAgent.match(/webkit/i) && "webkit") || (userAgent.match(/msie/i) && "ms") || (userAgent.match(/mozilla/i) && "moz") || "";

Function.prototype.property = function(prop, desc) {
  return Object.defineProperty(this.prototype, prop, desc);
};

if (typeof window.addEventListener !== "function") {
  HTMLElement.prototype.addEventListener = function(type, callback, useCapture) {
    return attachEvent("on" + type, callback);
  };
}

/*
window.onEnterFrame
*/


window.onEnterFrame = (function() {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
    return window.setTimeout(callback, 1000 / window._FPS);
  };
})();

module.exports = {
  /*
  Browser's user-agent string
  @attribute userAgent
  @type {String}
  @static
  @readonly
  */

  userAgent: userAgent,
  /*
  Device supports touch events?
  @attribute touch
  @type {Boolean}
  @static
  @readonly
  */

  touch: "ontouchstart" in window,
  /*
  Device supports Retina Display?
  @attribute retina
  @type {Boolean}
  @static
  @readonly
  */

  retina: window.devicePixelRatio > 1 || window.matchMedia("(min-resolution: 1.1dppx)").matches,
  imageSmoothingEnabled: prefix("imageSmoothingEnabled")
};

/*
//@ sourceMappingURL=support.map
*/

},{}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
module.exports = {
  Matrix2D: require("./matrix2d"),
  Vector2D: require("./vector2d"),
  UUID: require("./uuid")
};

/*
//@ sourceMappingURL=exports.map
*/

},{"./matrix2d":5,"./uuid":6,"./vector2d":7}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Matrix2D;

Matrix2D = (function() {
  /*
  Based on [EaselJS](https://github.com/CreateJS/EaselJS/) Matrix2D implementation.
  
  @class Matrix2D
  @constructor
  
  @param {Number} m11
  @param {Number} m12
  @param {Number} m21
  @param {Number} m22
  @param {Number} dx
  @param {Number} dy
  */

  function Matrix2D(m11, m12, m21, m22, dx, dy) {
    if (m11 !== null) {
      this.m11 = m11;
    }
    this.m12 = m12 || 0;
    this.m21 = m21 || 0;
    if (m22 !== null) {
      this.m22 = m22;
    }
    this.dx = dx || 0;
    this.dy = dy || 0;
  }

  /*
  Generates matrix properties from the specified display object transform properties, and appends them with this matrix.
  For example, you can use this to generate m11 matrix from m11 display object: var mtx = new Matrix2D();
  mtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);
  @method appendTransform
  @param {Number} x
  @param {Number} y
  @param {Number} scaleX
  @param {Number} scaleY
  @param {Number} rotation
  @param {Number} skewX
  @param {Number} skewY
  @param {Number} pivotX Optional.
  @param {Number} pivotY Optional.
  @return {Matrix2D} This matrix. Useful for chaining method calls.
  */


  Matrix2D.prototype.appendTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, pivotX, pivotY) {
    var cos, r, sin;
    cos = void 0;
    sin = void 0;
    r = void 0;
    if (rotation % 360) {
      r = rotation * Matrix2D.DEG_TO_RAD;
      cos = Math.cos(r);
      sin = Math.sin(r);
    } else {
      cos = 1;
      sin = 0;
    }
    if (skewX || skewY) {
      skewX *= Matrix2D.DEG_TO_RAD;
      skewY *= Matrix2D.DEG_TO_RAD;
      this.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);
      this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);
    } else {
      this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);
    }
    if (pivotX || pivotY) {
      this.dx -= pivotX * this.m11 + pivotY * this.m21;
      this.dy -= pivotX * this.m12 + pivotY * this.m22;
    }
    return this;
  };

  /*
  Appends the specified matrix properties with this matrix. All parameters are required.
  @method append
  @param {Number} m11
  @param {Number} m12
  @param {Number} m21
  @param {Number} m22
  @param {Number} dx
  @param {Number} dy
  @return {Matrix2D} This matrix. Useful for chaining method calls.
  */


  Matrix2D.prototype.append = function(m11, m12, m21, m22, dx, dy) {
    var a1, b1, c1, d1;
    a1 = this.m11;
    b1 = this.m12;
    c1 = this.m21;
    d1 = this.m22;
    this.m11 = m11 * a1 + m12 * c1;
    this.m12 = m11 * b1 + m12 * d1;
    this.m21 = m21 * a1 + m22 * c1;
    this.m22 = m21 * b1 + m22 * d1;
    this.dx = dx * a1 + dy * c1 + this.dx;
    this.dy = dx * b1 + dy * d1 + this.dy;
    return this;
  };

  /*
  Inverts the matrix, causing it to perform the opposite transformation.
  @method invert
  @return {Matrix2D} this
  */


  Matrix2D.prototype.invert = function() {
    var a1, b1, c1, d1, n, tx1;
    a1 = this.m11;
    b1 = this.m12;
    c1 = this.m21;
    d1 = this.m22;
    tx1 = this.dx;
    n = a1 * d1 - b1 * c1;
    this.m11 = d1 / n;
    this.m12 = -b1 / n;
    this.m21 = -c1 / n;
    this.m22 = a1 / n;
    this.dx = (c1 * this.dy - d1 * tx1) / n;
    this.dy = -(a1 * this.dy - b1 * tx1) / n;
    return this;
  };

  /*
  Clone Matrix2D instance
  @return {Matrix2D}
  */


  Matrix2D.prototype.clone = function() {
    return new Matrix2D(this.m11, this.m12, this.m21, this.m22, this.dx, this.dy);
  };

  /*
  Reset matrix to it's identity
  @return {Matrix2D} this
  */


  Matrix2D.prototype.identity = function() {
    this.m11 = this.m22 = 1;
    this.m12 = this.m21 = this.dx = this.dy = 0;
    return this;
  };

  /*           
  Multiplier for converting degrees to radians. Used internally by Matrix2D.
  
  @attribute DEG_TO_RAD
  @static
  @readonly
  @return {Number}
  */


  Matrix2D.DEG_TO_RAD = Math.PI / 180;

  Matrix2D.identity = new Matrix2D(1, 0, 0, 1, 0, 0);

  return Matrix2D;

})();

module.exports = Matrix2D;

/*
//@ sourceMappingURL=matrix2d.map
*/

},{}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var UUID;

UUID = (function() {
  function UUID() {}

  /*
  @method generateUniqueId
  @return {String}
  */


  UUID.generateUniqueId = function() {
    return "gc-" + this.uuid();
  };

  /*
  @method uuid
  @return {String}
  */


  UUID.uuid = function() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r, v;
      r = Math.random() * 16 | 0;
      v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  };

  return UUID;

})();

module.exports = UUID;

/*
//@ sourceMappingURL=uuid.map
*/

},{}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Vector2d;

Vector2d = (function() {
  function Vector2d(x, y) {
    this.x = x != null ? x : 0;
    this.y = y != null ? y : 0;
    /*
    Get the magnitude of this vector
    @attribute length
    @readonly
    */

    Object.defineProperty(this, "length", {
      get: function() {
        return Math.sqrt((this.x * this.x) + (this.y * this.y));
      },
      configurable: true
    });
    /*
    Get this vector with a magnitude of 1.
    @attribute normalized
    @readonly
    */

    Object.defineProperty(this, "normalized", {
      get: function() {
        var magnitude;
        magnitude = this.length;
        return new Vector2d(this.x / magnitude, this.y / magnitude);
      },
      configurable: true
    });
  }

  /*
  @method set
  @param {Number} x
  @param {Number} y
  @return {Vector2d}
  */


  Vector2d.prototype.set = function(x, y) {
    this.x = x;
    this.y = y;
  };

  /*
  @method sum
  @param {Vector2d} vector2d
  @return {Vector2d}
  */


  Vector2d.prototype.subtract = function(vector2d) {
    this.x -= vector2d.x;
    return this.y -= vector2d.y;
  };

  /*
  @method sum
  @param {Vector2d} vector2d
  @return {Vector2d}
  */


  Vector2d.prototype.sum = function(vector2d) {
    this.x += vector2d.x;
    return this.y += vector2d.y;
  };

  /*
  @method scale
  @param {Number} x (or x y)
  @param {Number} y
  @return {Vector2d}
  */


  Vector2d.prototype.scale = function(x, y) {
    this.x *= x;
    return this.y *= y || x;
  };

  /*
  @method clone
  @return {Vector2d}
  */


  Vector2d.prototype.clone = function() {
    return new Vector2d(this.x, this.y);
  };

  /*
  Return unit vector
  @return {Vector2d}
  */


  Vector2d.prototype.unit = function() {
    return new Vector2d(Math.cos(this.x), Math.sin(this.y));
  };

  /*
  Normalize this vector
  @return {Vector2d}
  */


  Vector2d.prototype.normalize = function() {
    var normal;
    normal = this.normalized;
    this.x = normal.x;
    return this.y = normal.y;
  };

  /*
  Get the distance between this vector and the argument vector
  @param {Vector2d} vector
  @return {Number}
  */


  Vector2d.distance = function(v1, v2) {
    var xdiff, ydiff;
    xdiff = v1.x - v2.x;
    ydiff = v1.y - v2.y;
    return Math.sqrt(xdiff * xdiff + ydiff * ydiff);
  };

  /*
  @method toString
  @return {String}
  */


  Vector2d.prototype.toString = function() {
    return "#<Vector2d @x=" + this.x + ", @y=" + this.y + ">";
  };

  Vector2d.LEFT = new Vector2d(-1, 0);

  Vector2d.RIGHT = new Vector2d(1, 0);

  Vector2d.TOP = new Vector2d(0, -1);

  Vector2d.BOTTOM = new Vector2d(0, 1);

  return Vector2d;

})();

module.exports = Vector2d;

/*
//@ sourceMappingURL=vector2d.map
*/

},{}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Container, Widget,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Widget = require("./widget");

Container = (function(_super) {
  __extends(Container, _super);

  function Container(options) {
    if (options == null) {
      options = {};
    }
    Container.__super__.constructor.call(this, options);
    this.children = {};
  }

  Container.prototype.addChild = function(child) {
    if (child.parent === !this) {
      return child.parent = this;
    } else {
      return this.children[child.id] = child;
    }
  };

  Container.prototype.render = function(ctx) {
    var child, cid, _ref, _results;
    Container.__super__.render.call(this, ctx);
    _ref = this.children;
    _results = [];
    for (cid in _ref) {
      child = _ref[cid];
      _results.push(child.render(ctx));
    }
    return _results;
  };

  return Container;

})(Widget);

module.exports = Container;

/*
//@ sourceMappingURL=container.map
*/

},{"./widget":15}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
module.exports = {
  Widget: require("./widget"),
  Stage: require("./stage"),
  Container: require("./container"),
  Text: require("./text"),
  geometry: require("./geometry/exports")
};

/*
//@ sourceMappingURL=exports.map
*/

},{"./container":8,"./geometry/exports":11,"./stage":13,"./text":14,"./widget":15}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Circle, Widget,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Widget = require("../widget");

Circle = (function(_super) {
  __extends(Circle, _super);

  function Circle(options) {
    if (options == null) {
      options = {};
    }
    Circle.__super__.constructor.call(this, options);
  }

  return Circle;

})(Widget);

/*
//@ sourceMappingURL=circle.map
*/

},{"../widget":15}],11:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
module.exports = {
  Circle: require("./circle"),
  Rect: require("./rect")
};

/*
//@ sourceMappingURL=exports.map
*/

},{"./circle":10,"./rect":12}],12:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Rect, Widget,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Widget = require("../widget");

Rect = (function(_super) {
  __extends(Rect, _super);

  function Rect(options) {
    if (options == null) {
      options = {};
    }
    Rect.__super__.constructor.call(this, options);
  }

  return Rect;

})(Widget);

/*
//@ sourceMappingURL=rect.map
*/

},{"../widget":15}],13:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Stage, container,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

container = require("../ui/container");

Stage = (function(_super) {
  __extends(Stage, _super);

  function Stage(options) {
    if (options == null) {
      options = {};
    }
    Stage.__super__.constructor.call(this, options);
    this.x = 0;
    this.y = 0;
  }

  Stage.prototype.render = function(ctx) {
    this.width = ctx.canvas.width;
    this.height = ctx.canvas.height;
    return Stage.__super__.render.call(this, ctx);
  };

  return Stage;

})(container);

module.exports = Stage;

/*
//@ sourceMappingURL=stage.map
*/

},{"../ui/container":8}],14:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var BASELINE, DEFAULT_ALIGN, DEFAULT_BASELINE, DEFAULT_COLOR, DEFAULT_FONT, Text, Widget,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Widget = require("./widget");

/*
Object.defineProperty this, BASELINE
@static
*/


BASELINE = {
  /*
  Object.defineProperty this, BASELINE.TOP
  @type {String}
  @static
  */

  TOP: "top",
  /*
  Object.defineProperty this, BASELINE.HANGING
  @type {String}
  @static
  */

  HANGING: "hanging",
  /*
  Object.defineProperty this, BASELINE.MIDDLE
  @type {String}
  @static
  */

  MIDDLE: "middle",
  /*
  Object.defineProperty this, BASELINE.ALPHABETIC
  @type {String}
  @static
  */

  ALPHABETIC: "alphabetic",
  /*
  Object.defineProperty this, BASELINE.IDEOGRAPHIC
  @type {String}
  @static
  */

  IDEOGRAPHIC: "ideographic",
  /*
  Object.defineProperty this, BASELINE.BOTTOM
  @type {String}
  @static
  */

  BOTTOM: "bottom"
};

DEFAULT_FONT = "Normal 12px Verdana";

DEFAULT_COLOR = "#000000";

DEFAULT_ALIGN = "left";

DEFAULT_BASELINE = BASELINE.TOP;

Text = (function(_super) {
  __extends(Text, _super);

  /*
  @class Text
  @extends DisplayObject
  
  @param {Object} options any attribute may be initialized by option
  @param {String} [options.text] default - ""
  @param {String} [options.font] default - "Normal 12px Verdana"
  @param {String} [options.align] default - "left"
  @param {String} [options.baseline] default - Joy.Text.BASELINE.TOP
  @param {String} [options.color] default - #000000
  
  @constructor
  */


  function Text(options) {
    if (options == null) {
      options = {};
    }
    Text.__super__.constructor.call(this, options);
    /*
    Text to be displayed
    @attribute text
    @default ""
    @type {String}
    */

    this.text = options.text || "";
    /*
    Font family and size
    @attribute font
    @default "Normal 12px Verdana"
    @type {String}
    */

    this.font = options.font || DEFAULT_FONT;
    /*
    Text horizontal alignment
    @attribute align
    @default "left"
    @type {String}
    */

    this.align = options.align || DEFAULT_ALIGN;
    /*
    Text vertical baseline
    @attribute baseline
    @default Joy.Text.BASELINE.TOP
    @type {String}
    */

    this.baseline = options.baseline || DEFAULT_BASELINE;
    /*
    Color of the text
    @attribute color
    @default "#000000"
    @type {String, Color}
    */

    this._color = options.color || DEFAULT_COLOR;
    Object.defineProperty(this, "color", {
      get: function() {
        return this._color;
      },
      set: function(color) {
        return this._color = color.toString();
      },
      configurable: true
    });
    if (options.stroke) {
      this.useStroke();
    } else {
      this.useFill();
    }
    Object.defineProperty(this, "width", {
      get: function() {
        if (this.__measure) {
          return this.__measure.width;
        } else {
          return 0;
        }
      }
    });
    Object.defineProperty(this, "height", {
      get: function() {
        if (this.__measure) {
          return this.__measure.height;
        } else {
          return 0;
        }
      }
    });
  }

  /*
  @method useStroke
  */


  Text.prototype.useStroke = function() {
    this.stroke = true;
    this.fillMethod = "strokeText";
    return this.styleMethod = "strokeStyle";
  };

  /*
  @method useFill
  */


  Text.prototype.useFill = function() {
    this.stroke = false;
    this.fillMethod = "fillText";
    return this.styleMethod = "fillStyle";
  };

  Text.prototype._render = function(ctx) {
    ctx.font = this.font;
    ctx.textAlign = this.align;
    ctx.textBaseline = this.baseline;
    ctx[this.styleMethod] = this.color;
    ctx[this.fillMethod](this.text, 0, 0);
    return this.getMeasure(ctx);
  };

  /*
  @method getMeasure
  @return {TextMetrics} text metrics
  */


  Text.prototype.getMeasure = function(ctx) {
    var m;
    this.__measure = {};
    m = Text.MeasureText(this.text, this.font);
    this.__measure.width = m[0];
    return this.__measure.height = m[1];
  };

  Text.BASELINE = BASELINE;

  Text.MeasureText = function(text, font) {
    var div, size, str;
    str = text + ":" + font;
    if (typeof this.__measuretext_cache__ === "object" && this.__measuretext_cache__[str]) {
      return this.__measuretext_cache__[str];
    }
    div = document.createElement("DIV");
    div.innerHTML = text;
    div.style.position = "absolute";
    div.style.top = "-100px";
    div.style.left = "-100px";
    div.style.font = font;
    console.log(div.style.fontFamily, div.style.fontWeight, div.style.fontSize);
    document.body.appendChild(div);
    size = [div.offsetWidth, div.offsetHeight];
    document.body.removeChild(div);
    if (typeof this.__measuretext_cache__ !== "object") {
      this.__measuretext_cache__ = {};
    }
    this.__measuretext_cache__[str] = size;
    return size;
  };

  return Text;

})(Widget);

module.exports = Text;

/*
//@ sourceMappingURL=text.map
*/

},{"./widget":15}],15:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Color, Core, Matrix2d, Support, UUID, Vector2d, Widget;

Core = require("../core");

UUID = require("../math/uuid");

Vector2d = require("../math/vector2d");

Matrix2d = require("../math/matrix2d");

Support = require("../core/support");

Color = require("../utils/color");

/*
Base renderable element
*/


Widget = (function() {
  function Widget(options) {
    if (options == null) {
      options = {};
    }
    this.id = UUID.generateUniqueId();
    /*
    @attribute pivot
    @type {Vector2d}
    @default 0,0
    */

    this.pivot = options.pivot || new Vector2d(options.pivotX || 0, options.pivotY || 0);
    /*
    @attribute skewX
    @type {Number}
    @default 0
    */

    this.skew = options.skew || new Vector2d(options.skewX || 0, options.skewY || 0);
    /*
    @attribute scale
    @type {Vector2d}
    @default 1,1
    */

    this.scale = options.scale || new Vector2d(options.scaleX || 1, options.scaleY || 1);
    /*
    @attribute alpha
    @type {Number}
    @default 1
    */

    this.alpha = (typeof options.alpha === "undefined" ? 1 : options.alpha);
    /*
    @attribute rotation
    @type {Number}
    @default 0
    */

    this.rotation = options.rotation || 0;
    /*
    @attribute smooth
    @type {Boolean}
    @default false
    */

    this.smooth = (typeof options.smooth === "undefined" ? true : options.smooth);
    this._matrix = Matrix2d.identity.clone();
    Object.defineProperty(this, "position", {
      get: function() {
        if (!this._position) {
          this._position = new Vector2d(0, 0);
        }
        return this._position;
      },
      set: function(vector) {
        return this._position = vector.clone();
      }
    });
    Object.defineProperty(this, "x", {
      get: function() {
        return this.position.x || 0;
      },
      set: function(x) {
        return this.position.x = x;
      }
    });
    if (options.x) {
      this.x = options.x;
    }
    Object.defineProperty(this, "y", {
      get: function() {
        return this.position.y || 0;
      },
      set: function(y) {
        return this.position.y = y;
      }
    });
    if (options.y) {
      this.y = options.y;
    }
    Object.defineProperty(this, "width", {
      get: function() {
        return this._width || 10;
      },
      set: function(w) {
        return this._width = w;
      },
      configurable: true
    });
    if (options.width) {
      this.width = options.width;
    }
    Object.defineProperty(this, "height", {
      get: function() {
        return this._height || 10;
      },
      set: function(h) {
        return this._height = h;
      },
      configurable: true
    });
    if (options.height) {
      this.height = options.height;
    }
    Object.defineProperty(this, "parent", {
      get: function() {
        return this._parent || 'undefined';
      },
      set: function(parent) {
        this._parent = parent;
        return this._parent.addChild(this);
      }
    });
    if (options.parent) {
      this.parent = options.parent;
    }
    Object.defineProperty(this, "drawBoundingBox", {
      get: function() {
        return this._bounding_box || false;
      },
      set: function(boool) {
        return this._bounding_box = boool || false;
      }
    });
    if (options.bbox) {
      this.drawBoundingBox = options.bbox;
    }
  }

  Widget.prototype.render = function(ctx) {
    var bit, mtx;
    bit = {
      "false": -1,
      "true": 1
    };
    mtx = this._matrix.clone().identity().appendTransform(this.position.x + this.width * (this.flipX + 0), this.position.y + this.height * (this.flipY + 0), this.scale.x * bit[!this.flipX], this.scale.y * bit[!this.flipY], this.rotation, this.skew.x, this.skew.y, this.pivot.x, this.pivot.y);
    ctx.beginPath();
    ctx.translate(this.position.x, this.position.y);
    ctx.transform(mtx.m11, mtx.m12, mtx.m21, mtx.m22, mtx.dx, mtx.dy);
    ctx.setAlpha(this.alpha);
    if (this.compositeOperation) {
      ctx.globalCompositeOperation = this.compositeOperation;
    }
    ctx[Support.imageSmoothingEnabled] = this.smooth;
    if (this.drawBoundingBox === true) {
      ctx.setAlpha(1);
      ctx.rect(0, 0, this.width, this.height);
    }
    ctx.setAlpha(this.alpha);
    if (this._render) {
      this._render(ctx);
    }
    ctx.translate(-this.position.x, -this.position.y);
    return ctx.closePath();
  };

  return Widget;

})();

module.exports = Widget;

/*
//@ sourceMappingURL=widget.map
*/

},{"../core":1,"../core/support":3,"../math/matrix2d":5,"../math/uuid":6,"../math/vector2d":7,"../utils/color":16}],16:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Color;

Color = (function() {
  /*
  @param {String | Number} hexOrRed hexadecimal color (String), or red (Number)
  @param {Number} green
  @param {Number} blue
  @param {Number} alpha
  
  @example
  // color name
  var color = new Joy.Color("red");
  
  @example
  // hexadecimal
  var color = new Joy.Color("#fff");
  
  @example
  // rgb
  var color = new Joy.Color(255, 50, 255);
  
  @example
  // rgba
  var color = new Joy.Color(255, 50, 255, 100);
  
  @class Color
  @constructor
  */

  function Color(r, g, b, a) {
    this.r = r != null ? r : 0;
    this.g = g != null ? g : 0;
    this.b = b != null ? b : 0;
    this.a = a != null ? a : 1;
  }

  Color.prototype.toString = function() {
    var r;
    if (!this.green && !this.blue) {
      r = this.red;
    } else if (this.alpha) {
      r = "rgba( " + this.red + ", " + this.green + ", " + this.blue + ", " + this.alpha + ")";
    } else {
      r = "rgb( " + this.red + ", " + this.green + ", " + this.blue + ")";
    }
    return r;
  };

  Color.random = function(alpha) {
    if (alpha == null) {
      alpha = 255;
    }
    return new Color(parseInt(Math.random() * 255, 10), parseInt(Math.random() * 255, 10), parseInt(Math.random() * 255, 10), alpha);
  };

  return Color;

})();

module.exports = Color;

/*
//@ sourceMappingURL=color.map
*/

},{}]},{},[1])
//@ sourceMappingURL=data:application/json;base64,
;