{"version":3,"sources":["webpackBootstrap d7ff00d774d6814ff005","./src/gamecore.coffee","./src/core/support.coffee","./src/core/core.coffee","./src/ui/exports.coffee","./src/utils/exports.coffee","./src/math/exports.coffee","./src/input/exports.coffee","./src/ui/stage.coffee","./src/core/context/2d.coffee","./src/core/events/dispatcher.coffee","./src/math/uuid.coffee","./src/core/debug/stats.coffee","./src/ui/widget.coffee","./src/ui/container.coffee","./src/ui/text.coffee","./src/ui/sprite.coffee","./src/ui/geometry/exports.coffee","./src/math/matrix2d.coffee","./src/math/vector2d.coffee","./src/math/math.coffee","./src/utils/color.coffee","./src/utils/font.coffee","./src/utils/loader.coffee","./src/input/mouse.coffee","./src/core/events/event.coffee","./src/ui/geometry/circle.coffee","./src/ui/geometry/rect.coffee"],"names":[],"mappings":"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","sourcesContent":["// shortcut for better minimizing\nvar exports = \"exports\";\n\n// The module cache\nvar installedModules = {};\n\n// The require function\nfunction require(moduleId) {\n\t// Check if module is in cache\n\tif(installedModules[moduleId])\n\t\treturn installedModules[moduleId][exports];\n\t\n\t// Create a new module (and put it into the cache)\n\tvar module = installedModules[moduleId] = {\n\t\texports: {},\n\t\tid: moduleId,\n\t\tloaded: false\n\t};\n\t\n\t// Execute the module function\n\tmodules[moduleId].call(module[exports], module, module[exports], require);\n\t\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\t\n\t// Return the exports of the module\n\treturn module[exports];\n}\n\n\n// expose the modules object (__webpack_modules__)\nrequire.modules = modules;\n\n// expose the module cache\nrequire.cache = installedModules;\n\n// __webpack_public_path__\nrequire.p = \"\";\n\n\n// Load entry module and return exports\nreturn require(0);","support = require \"./core/support\"\n\nGameCore =\n    Core: require \"./core/core\"\n    UI: require \"./ui/exports\"\n    Math: require \"./math/exports\"\n    Utils: require \"./utils/exports\"\n    Input: require \"./input/exports\"\n    # Shaders: require \"./shaders/exports\"\n\n\nif window\n    window.GameCore = window.GameCore or GameCore\n\nmodule.exports = GameCore","prefix = (name) ->\n    name = name.charAt(0).toUpperCase() + name.slice(1)  if browserPrefix isnt \"\"\n    browserPrefix + name\n\nuserAgent = navigator.userAgent\nbrowserPrefix = ((userAgent.match(/opera/i) and \"o\") or (userAgent.match(/webkit/i) and \"webkit\") or (userAgent.match(/msie/i) and \"ms\") or (userAgent.match(/mozilla/i) and \"moz\") or \"\")\n\nFunction.prototypeproperty = (prop, desc) ->\n    Object.defineProperty @prototype, prop, desc\n\n#\n#   * Extend HTMLElement to support addEventListener method.\n#   \nif typeof (window.addEventListener) isnt \"function\"\n    HTMLElement.prototypeaddEventListener = (type, callback, useCapture) ->\n        attachEvent \"on\" + type, callback\n\n###\nwindow.onEnterFrame\n###\nwindow.onEnterFrame = (() ->\n    window.requestAnimationFrame or \n    window.webkitRequestAnimationFrame or \n    window.mozRequestAnimationFrame or \n    window.oRequestAnimationFrame or \n    window.msRequestAnimationFrame or \n    (callback) -> \n        window.setTimeout callback, 1000 / (window._FPS or 60)\n)()\n\n\n###\nWorking around Typed arrays\n###\n(->\n    ###\n    Trying to create Uint8Array. \n    If everything is ok then return, otherwise we need to create a simulation.\n\n    Code borrowed from pdf.js (https://gist.github.com/1057924)\n    ###\n    try\n        a = new Uint8Array(1)\n        return\n\n    # Simulating TypedArrays\n    subarray = (start, end) ->\n        @slice start, end\n\n    set_ = (array, offset) ->\n        i = undefined\n        n = array.length\n        offset = 0  if arguments_.length < 2\n        i = 0\n        while i < n\n            this[offset] = array[i] & 0xFF\n            ++i\n            ++offset\n\n    TypedArray = (arg1) ->\n        result = undefined\n        i = undefined\n        if typeof arg1 is \"number\"\n            result = new Array(arg1)\n            i = 0\n            while i < arg1\n                result[i] = 0\n                ++i\n        else\n            result = arg1.slice(0)\n        \n        result.subarray = subarray\n        result.buffer = result\n        result.byteLength = result.length\n        result.set = set_\n        result.buffer = arg1.buffer  if typeof arg1 is \"object\" and arg1.buffer\n        result\n\n    window.Uint8Array = TypedArray\n    window.Uint32Array = TypedArray\n    window.Int32Array = TypedArray\n)()\n(->\n    # Also make sure XHR understands typing.\n    # Code based on pdf.js (https://gist.github.com/1057924)\n    \n    # shortcut for Opera - it's already fine\n    return  if window.opera\n\n    # shortcuts for browsers that already implement XHR minetyping\n    return  if \"response\" of XMLHttpRequest.prototype or \"mozResponseArrayBuffer\" of XMLHttpRequest.prototype or \"mozResponse\" of XMLHttpRequest.prototype or \"responseArrayBuffer\" of XMLHttpRequest.prototype\n    \n    getter = undefined\n    \n    if window.VBArray\n        # If we have access to the VBArray (i.e., we're in IE), use that\n        getter = ->\n            new Uint8Array(new VBArray(@responseBody).toArray())\n    else\n        # Okay... umm.. untyped arrays? This may break completely.\n        # (Android browser 2.3 and 3 don't do typed arrays)\n        getter = ->\n            @responseBody\n\n    Object.defineProperty XMLHttpRequest.prototype, \"response\",\n        get: getter\n)()\n\n#IE9 does not have binary-to-ascii built in O_O\n(->\n    # Code borrowed from PHP.js (http://phpjs.org/functions/base64_encode:358)\n    window.btoa = (data) ->\n        b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"\n        o1 = undefined\n        o2 = undefined\n        o3 = undefined\n        h1 = undefined\n        h2 = undefined\n        h3 = undefined\n        h4 = undefined\n        bits = undefined\n        i = 0\n        ac = 0\n        enc = \"\"\n        tmp_arr = []\n        return data  unless data\n        loop\n            o1 = data.charCodeAt(i++)\n            o2 = data.charCodeAt(i++)\n            o3 = data.charCodeAt(i++)\n            bits = o1 << 16 | o2 << 8 | o3\n            h1 = bits >> 18 & 0x3f\n            h2 = bits >> 12 & 0x3f\n            h3 = bits >> 6 & 0x3f\n            h4 = bits & 0x3f\n            tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4)\n            break unless i < data.length\n        enc = tmp_arr.join(\"\")\n        r = data.length % 3\n        ((if r then enc.slice(0, r - 3) else enc)) + \"===\".slice(r or 3)\n)() if not window.btoa\n\n# (->\n#     Object::extend = (others...) ->\n#         for o in others\n#             @[key] = val for key, val of o\n#         @\n\n# )() if not Object::extend\n\n###\nChecking for ability to work\n###\nERRORS = []\n# 1. Do we have a mechanism for binding implicit get/set?\nif not Object.defineProperty\n    ERRORS.append \"Browser doesnt support Object.defineProperty.\"\n\n# 2. Do we have Canvas2D available?\nif not document.createElement(\"canvas\").getContext\n    ERRORS.append \"Browser doesnt support <canvas> and the Canvas2D API.\"\n\n\nmodule.exports = \n    ###\n    ###\n    ERRORS: ERRORS\n\n    ###\n    Browser's user-agent string\n    @attribute userAgent\n    @type {String}\n    @static\n    @readonly\n    ###\n    userAgent: userAgent\n\n    ###\n    Device supports touch events?\n    @attribute touch\n    @type {Boolean}\n    @static\n    @readonly\n    ###\n    touch: (\"ontouchstart\" of window)\n\n    ###\n    Device supports Retina Display?\n    @attribute retina\n    @type {Boolean}\n    @static\n    @readonly\n    ###\n    retina: window.devicePixelRatio > 1 or window.matchMedia(\"(min-resolution: 1.1dppx)\").matches\n\n    #\n    #     * Misc / Interal use\n    #     \n    imageSmoothingEnabled: prefix(\"imageSmoothingEnabled\")","context2d = require \"./context/2d\"\nsupport = require \"./support\"\nEvents = require \"./events/dispatcher\"\nUUID = require \"../math/uuid\"\nStage = require \"../ui/stage\"\n\nStats = require \"./debug/stats\"\n\n###\nGame Core base class\n\n@property {Stage} stage\n@property {Boolean} fullWindowSize\n@property {Boolean} paused\n@property {Context} context\n@property {Int} width\n@property {Int} heigth\n@property {DOMElement} renderer\n@property {Boolean} debug\n\n@example How to create an game core \n    gc = new GameCore() # Creating core\n    gc.renderer = document.body # Appends new canvas element to documents body\n\n@example Making canvas full-sized\n    gc = new GameCore() # Creating core\n    gc.fullWindowSize = true\n\n###\nmodule.exports = class GameCore extends Events\n    ###\n    GameCore instancec archive\n    ###\n    @cores = {}\n    \n    ###\n    Start your application from here.\n\n    @param {Object} options\n    ###\n    constructor: (@options={}) ->\n        super @options\n        ###\n        In the first case we need to generate id for new instance, if it not\n         present in options.\n        ###\n        @id = @options.id or UUID.generateUniqueId()\n\n        ###\n        Checing for runtime errors\n        ###\n        if support.ERRORS\n            for error in support.ERRORS\n                throw error\n\n        ###\n        Setting up a canvas.\n        If canvas doesn't present in options then create it.\n        ###\n        @options.canvas = @options.canvas or @createCanvas()\n        \n        ###\n        Registrating GameCore instance in canvas ang GameCore global.\n        ###\n        @options.canvas.core = @\n        GameCore.cores[@id] = @\n\n        ###\n        Setting up framerate\n        ###\n        @setFramerate()\n\n        ###\n        Stages map\n        ###\n        @_stages = {}\n        Object.defineProperty @, \"stage\",\n            get: ->\n                if @_current_stage_id\n                    @_stages[@_current_stage_id]\n                else\n                    stage = new Stage\n                    @_current_stage_id = stage.id\n                    @addStage stage\n                    stage\n            set: (stage)->\n                if not @_stages[stage.id]\n                    @addStage stage\n                @_current_stage_id = stage.id\n                @dispatchEvent 'stage_changed', stage\n\n\n        ###\n        ###\n        Object.defineProperty @, \"fullWindowSize\",\n            get: ->\n                @_in_the_fullscreen_now\n            set: (b)->\n                if b == true\n                    window.addEventListener \"resize\", @_fullWindowSize_resizer\n                    @_in_the_fullscreen_now = true\n                    @setSize document.width, document.height\n                else\n                    window.removeEventListener \"resize\", @_fullWindowSize_resizer\n                    @_in_the_fullscreen_now = false\n                    @setSize @options.width, @options.height\n\n        @fullWindowSize = @options.fullWindowSize\n\n        ###\n        ###\n        Object.defineProperty @, \"width\",\n            get: ->\n                @options.canvas.width\n\n            set: (width) ->\n                @options.canvas.width = width     \n                @options.canvas.style.width = width + \"px\"         \n\n        ###\n        ###\n        Object.defineProperty @, \"height\",\n            get: ->\n                @options.canvas.height\n\n            set: (height) ->\n                @options.canvas.height = height\n                @options.canvas.style.height = height + \"px\"     \n\n        ###\n        ###\n        if @fullWindowSize\n            @options.width = window.width\n            @options.height = window.height\n        @setSize @options.width, @options.height\n\n        ###\n        Context element.\n        @note Currently support only Context2d\n        @property context\n        ###\n        Object.defineProperty @, \"context\",\n            get: ->\n                if not @_context\n                    @_context = new context2d canvas:@options.canvas\n                @_context\n\n        ###\n        @property paused\n        ###\n        Object.defineProperty @, \"paused\",\n            get: ->\n                @_paused or false\n            set: (paused) ->\n                @_paused = if paused then true else false\n\n        ###\n        ###\n        Object.defineProperty @, \"debug\",\n            get: ->\n                @_debug or false\n            set: (debug) ->\n                @_debug = !!debug   \n\n        ###\n        Renderer element.\n        @property renderer\n        ###\n        Object.defineProperty @, \"renderer\",\n            get: ->\n                @_parent_node or 'undefined'\n            set: (node) ->\n                if not node.tagName\n                    throw Error(\"Can render only on document elements\")\n                node.appendChild @options.canvas\n                @_parent_node = node\n\n        @_stats = new Stats @\n        @_onEnterFrame()\n\n    ###\n    ###\n    addStage: (stage, setCurrent=false)->\n        stage = stage or new Stage\n        @_stages[stage.id] = stage\n        @stage = stage.id if setCurrent\n        @dispatchEvent 'stage_added'\n        @dispatchEvent 'stage', stage\n        stage\n\n    ###\n    Switch pause state\n    ###\n    pause: () ->\n        @paused = not @paused\n        if @paused then @dispatchEvent 'paused' else @dispatchEvent 'unpaused'\n    \n    ###\n    Set's framerate. Not usable at the moment...\n    @param {Int} framerate\n    @method setFramerate\n    ###\n    setFramerate: (framerate=60) ->\n        @_FPS = framerate\n\n    ###\n    Set size of an canvas element.\n    @param {Int} width\n    @param {Int} height\n    @method setSize\n    ###\n    setSize: (width=400, height=300) ->\n        @width = width\n        @height = height\n        @dispatchEvent 'sizeChanged'\n\n    _fullWindowSize_resizer: ()->\n        gci = @\n        (e) -> gci.setSize window.width, window.height\n    \n    ###\n    Creates a canvas element\n    @method createCanvas\n    ###\n    createCanvas: () ->\n        canvas = document.createElement 'canvas'\n        # document.body.appendChild canvas\n        canvas\n\n    ###\n    Call window's requestAnimationFrame.\n    @method _onEnterFrame\n    ###\n    _onEnterFrame: (gci=@)->\n        unless @paused\n            # Update tweening engine\n            #@core.TweenManager.update()\n            # Update rendering\n            gci._render gci.stage\n        window.onEnterFrame ()-> gci._onEnterFrame(gci)\n\n    _render: ()-> \n        @dispatchEvent 'render_start'\n        \n        @stage.width = @width\n        @stage.height = @height\n\n        @context.render [@stage]\n        \n        @dispatchEvent 'render_end'\n        @dispatchEvent 'render'\n\n    ###\n    @method addInput\n    ###\n    addInput: (hid)->\n        unless @_installedInputs\n            @_installedInputs = {}\n        unless input in @_installedInputs\n            input = new hid @\n            @_installedInputs[hid] = input\n","module.exports = \n    Widget: require \"./widget\"\n\n    Stage: require \"./stage\"\n    Container: require \"./container\"\n\n    Text: require \"./text\"\n    Sprite: require \"./sprite\"\n\n    geometry: require \"./geometry/exports\"","module.exports = \n    Color: require \"./color\"\n    Font: require \"./font\"\n    Loader: require \"./loader\"","module.exports = \n    Matrix2D : require \"./matrix2d\"\n    Vector2D : require \"./vector2d\"\n    UUID: require \"./uuid\"\n    Math: require \"./math\"","module.exports = \n    # Keyboard : require \"./keyboard\"\n    Mouse : require \"./mouse\"\n    # Touch : require \"./touch\"\n    # Accel : require \"./accel\" ","container = require \"../ui/container\"\n\n###\nStage container\n@note GameCore.exports.ui.Stage\n###\nclass Stage extends container\n    constructor:(options={})->\n        super options\n        @x= options.x or 0\n        @y= options.y or 0\n\n        @shaders = []\n\n        @canvas = document.createElement 'canvas'\n        @ctx = @canvas.getContext '2d'\n\n    addShader: (shader)->\n        @shaders.push shader\n\n    render:(ctx)->\n        @width = @width or ctx.canvas.width\n        @height= @width or ctx.canvas.height\n\n        if @shaders\n            @canvas.width = @width\n            @canvas.height= @height\n\n            super @ctx\n\n            for shader in @shaders\n                shader.process @ctx\n\n            data = @ctx.getImageData 0, 0, @width, @height\n\n            ctx.putImageData data, @x, @y\n        else\n            super ctx\n\nmodule.exports = Stage","class Context2d\n    constructor: (options) ->\n        @setCanvas options.canvas\n\n    setCanvas: (@canvas) ->\n        @ctx = @canvas.getContext '2d'\n        @\n\n    clear: () ->\n        @ctx.clearRect 0, 0, @ctx.canvas.width, @ctx.canvas.height\n        @\n\n    render: (layers=[]) ->\n        @clear()\n        layer.render @ctx for layer in layers \n        \nmodule.exports = Context2d","###\nInspired by CreateJS/TweenJS\n###\n\nEvent = require \"./event\"\n\nclass EventsDispatcher\n\n    ###\n    Static initializer to mix EventDispatcher methods into a target object or prototype.\n    @method constructor\n    @static\n    @param {Object} target The target object to inject EventDispatcher methods into. This can be an instance or aprototype.\n    ###\n    constructor: ()->\n        @_listeners = null\n        @_captureListeners = null\n\n    ###\n    Adds the specified event listener. Note that adding multiple listeners to the same function will result in\n    multiple callbacks getting fired.\n\n    @example\n        Object.addEventListener \"click\", handleClick\n        handleClick = (event)->\n            # Handle click function body\n\n    @method addEventListener\n    @param {String} type The string type of the event.\n    @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when the event is dispatched.\n    @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n    @return {Function | Object} Returns the listener for chaining or assignment.\n    ###\n    addEventListener: (type, listener, useCapture) ->\n        listeners = undefined\n        if useCapture\n          listeners = @_captureListeners = @_captureListeners or {}\n        else\n          listeners = @_listeners = @_listeners or {}\n        arr = listeners[type]\n        @removeEventListener type, listener, useCapture  if arr\n        arr = listeners[type] # remove may have deleted the array\n        unless arr\n          listeners[type] = [listener]\n        else\n          arr.push listener\n        listener\n\n    ###\n    A shortcut method for using addEventListener that makes it easier to specify an execution scope, have a listener\n    only run once, associate arbitrary data with the listener, and remove the listener.\n\n    This method works by creating an anonymous wrapper function and subscribing it with addEventListener.\n    The created anonymous function is returned for use with .removeEventListener (or .off).\n\n    @example\n        listener = myBtn.on \"click\", handleClick, null, false, {count:3}\n        handleClick = (evt, data)->\n            data.count -= 1\n            console.log this == myBtn # true - scope defaults to the dispatcher\n            if data.count == 0\n                alert \"clicked 3 times!\"\n                myBtn.off \"click\", listener\n                # alternately: evt.remove()\n\n    @method on\n    @param {String} type The string type of the event.\n    @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when the event is dispatched.\n    @param {Object} [scope] The scope to execute the listener in. Defaults to the dispatcher/currentTarget for function listeners, and to the listener itself for object listeners (ie. using handleEvent).\n    @param {Boolean} [once=false] If true, the listener will remove itself after the first time it is triggered.\n    @param {*} [data] Arbitrary data that will be included as the second parameter when the listener is called.\n    @param {Boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n    @return {Function} Returns the anonymous function that was created and assigned as the listener. This is needed to remove the listener later using .removeEventListener.\n    ###\n    on: (type, listener, scope, once, data, useCapture) ->\n        if listener.handleEvent\n            scope = scope or listener\n            listener = listener.handleEvent\n        scope = scope or this\n        @addEventListener type, ((evt) ->\n            listener.call scope, evt, data\n            once and evt.remove()\n        ), useCapture\n\n    ###\n    Removes the specified event listener.\n\n    @note that you must pass the exact function reference used when the event was added. If a proxy\n    function, or function closure is used as the callback, the proxy/closure reference must be used - a new proxy or\n    closure will not work.\n\n    @example\n        displayObject.removeEventListener \"click\", handleClick\n\n    @method removeEventListener\n    @param {String} type The string type of the event.\n    @param {Function | Object} listener The listener function or object.\n    @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n    ###\n    removeEventListener: (type, listener, useCapture) ->\n        listeners = (if useCapture then @_captureListeners else @_listeners)\n        return  unless listeners\n        arr = listeners[type]\n        return  unless arr\n        i = 0\n        l = arr.length\n\n        while i < l\n            if arr[i] is listener\n                if l is 1 # allows for faster checks.\n                    delete (listeners[type])\n                else\n                    arr.splice i, 1\n                break\n            i++\n\n    ###\n    A shortcut to the removeEventListener method, with the same parameters and return value. This is a companion to the\n    .on method.\n\n    @method off\n    @param {String} type The string type of the event.\n    @param {Function | Object} listener The listener function or object.\n    @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n    ###\n    off: @.prototype.removeEventListener\n\n    ###\n    Removes all listeners for the specified type, or all listeners of all types.\n\n    @example Remove all listeners\n        displayObject.removeAllEventListeners()\n\n    @example Remove all click listeners\n        displayObject.removeAllEventListeners \"click\"\n\n    @method removeAllEventListeners\n    @param {String} [type] The string type of the event. If omitted, all listeners for all types will be removed.\n    ###\n    removeAllEventListeners: (type) ->\n        unless type\n            @_listeners = @_captureListeners = null\n        else\n            delete (@_listeners[type])  if @_listeners\n            delete (@_captureListeners[type])  if @_captureListeners\n\n    ###\n    Dispatches the specified event to all listeners.\n\n    @example Use a string event\n        @dispatchEvent \"complete\"\n\n    @example Use an Event instance\n        event = new Event \"progress\"\n        @dispatchEvent event\n\n    @method dispatchEvent\n    @param {Object | String | Event} eventObj An object with a \"type\" property, or a string type.\n    While a generic object will work, it is recommended to use a CreateJS Event instance. If a string is used,\n    dispatchEvent will construct an Event instance with the specified type.\n    @param {Object} [target] The object to use as the target property of the event object. This will default to the\n    dispatching object. <b>This parameter is deprecated and will be removed.</b>\n    @return {Boolean} Returns the value of eventObj.defaultPrevented.\n    ###\n    dispatchEvent: (eventObj, target) ->\n        if typeof eventObj is \"string\"\n          # won't bubble, so skip everything if there's no listeners:\n          listeners = @_listeners\n          return false  if not listeners or not listeners[eventObj]\n          eventObj = new Event(eventObj)\n    \n        # TODO: deprecated. Target param is deprecated, only use case is MouseEvent/mousemove, remove.\n        eventObj.target = target or this\n        if not eventObj.bubbles or not @parent\n            @_dispatchEvent eventObj, 2\n        else\n            top = this\n            list = [top]\n            list.push top = top.parent  while top.parent\n            i = undefined\n            l = list.length\n          \n            # capture & atTarget\n            i = l - 1\n            while i >= 0 and not eventObj.propagationStopped\n                list[i]._dispatchEvent eventObj, 1 + (i is 0)\n                i--\n          \n            # bubbling\n            i = 1\n            while i < l and not eventObj.propagationStopped\n                list[i]._dispatchEvent eventObj, 3\n                i++\n            eventObj.defaultPrevented\n\n    ###\n    Indicates whether there is at least one listener for the specified event type.\n    @method hasEventListener\n    @param {String} type The string type of the event.\n    @return {Boolean} Returns true if there is at least one listener for the specified event.\n    ###\n    hasEventListener: (type) ->\n        listeners = @_listeners\n        captureListeners = @_captureListeners\n        !!((listeners and listeners[type]) or (captureListeners and captureListeners[type]))\n\n    ###\n    Indicates whether there is at least one listener for the specified event type on this object or any of its\n    ancestors (parent, parent's parent, etc). A return value of true indicates that if a bubbling event of the\n    specified type is dispatched from this object, it will trigger at least one listener.\n\n    This is similar to {{#crossLink \"EventDispatcher/hasEventListener\"}}{{/crossLink}}, but it searches the entire\n    event flow for a listener, not just this object.\n    @method willTrigger\n    @param {String} type The string type of the event.\n    @return {Boolean} Returns `true` if there is at least one listener for the specified event.\n    ###\n    willTrigger: (type) ->\n        o = this\n        while o\n            return true  if o.hasEventListener(type)\n            o = o.parent\n        false\n\n    ###\n    @method toString\n    @return {String} a string representation of the instance.\n    ###\n    toString: ->\n        \"<EventDispatcher>\"\n\n    ###\n    @method _dispatchEvent\n    @param {Object | String | Event} eventObj\n    @param {Object} eventPhase\n    @protected\n    ###\n    _dispatchEvent: (eventObj, eventPhase) ->\n        l = undefined\n        listeners = (if (eventPhase is 1) then @_captureListeners else @_listeners)\n        if eventObj and listeners\n            arr = listeners[eventObj.type]\n            return  if not arr or not (l = arr.length)\n            eventObj.currentTarget = this\n            eventObj.eventPhase = eventPhase\n            eventObj.removed = false\n            arr = arr.slice() # to avoid issues with items being removed or added during the dispatch\n            i = 0\n\n        while i < l and not eventObj.immediatePropagationStopped\n            o = arr[i]\n            if o.handleEvent\n                o.handleEvent eventObj\n            else\n                o eventObj\n        \n            if eventObj.removed\n                @off eventObj.type, o, eventPhase is 1\n                eventObj.removed = false\n            i++\n\nmodule.exports = EventsDispatcher","###\nUnique ID generator\n\n@note GameCore.exports.Math.UUID\n\n###\nclass UUID\n    ###\n    @method generateUniqueId\n    @return {String}\n    ###\n    @generateUniqueId: ->\n        \"gc-\" + @uuid()\n\n    ###\n    @method uuid\n    @return {String}\n    ###\n    @uuid: ->\n        'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) ->\n            r = Math.random() * 16 | 0\n            v = if c is 'x' then r else (r & 0x3|0x8)\n            v.toString(16)\n        )\n\nmodule.exports = UUID","Text = require \"../../ui/text\"\nWidget = require \"../../ui/widget\"\n\nmodule.exports = class Stats extends Widget\n    constructor: (@core)->\n        super\n\n        @startTime = Date.now()\n        @prevTime = @startTime\n        @ms = 0\n        @msMin = Infinity\n        @msMax = 0\n        @fps = 0\n        @fpsMin = Infinity\n        @fpsMax = 0\n        @frames = 0\n        @mode = 0\n\n        me = @\n        @core.on 'update', ()->\n            me.update()\n\n        ###\n        Creating UI components\n        ###\n        @text = new GameCore.UI.Text\n\n    update: ()->\n        time = Date.now()\n        @ms = time - @startTime\n        @msMin = Math.min(msMin, ms)\n        @msMax = Math.max(msMax, ms)\n        # msText.textContent = ms + \" MS (\" + msMin + \"-\" + msMax + \")\"\n        # updateGraph msGraph, Math.min(30, 30 - (ms / 200) * 30)\n        @frames++\n        if time > prevTime + 1000\n            @fps = Math.round((@frames * 1000) / (time - @prevTime))\n            @fpsMin = Math.min(@fpsMin, @fps)\n            @fpsMax = Math.max(@fpsMax, @fps)\n            # fpsText.textContent = fps + \" FPS (\" + fpsMin + \"-\" + fpsMax + \")\"\n            # updateGraph fpsGraph, Math.min(30, 30 - (fps / 100) * 30)\n            @prevTime = time\n            @frames = 0\n        @startTime = time\n\n    _render: (ctx)->\n        text.text = \"FPS: #{@fps}\"\n        \n","UUID = require \"../math/uuid\"\n#Events = require \"../core/events\"\nEvents = require \"../core/events/dispatcher\"\nVector2d = require \"../math/vector2d\"\nMatrix2d = require \"../math/matrix2d\"\nSupport = require \"../core/support\"\nColor = require \"../utils/color\"\n\n###\nBase renderable element\n\n@note GameCore.exports.ui.Widget\n###\nmodule.exports = class Widget extends Events\n    constructor: (options={})->\n        @id = UUID.generateUniqueId()\n        super options\n\n        ###\n        @attribute pivot\n        @type {Vector2d}\n        @default 0,0\n        ###\n        @pivot = options.pivot or new Vector2d(options.pivotX or 0, options.pivotY or 0)\n        \n        ###\n        @attribute skewX\n        @type {Number}\n        @default 0\n        ###\n        @skew = options.skew or new Vector2d(options.skewX or 0, options.skewY or 0)\n        \n        ###\n        @attribute scale\n        @type {Vector2d}\n        @default 1,1\n        ###\n        @scale = options.scale or new Vector2d(options.scaleX or 1, options.scaleY or 1)\n        \n        ###\n        @attribute alpha\n        @type {Number}\n        @default 1\n        ###\n        Object.defineProperty this, \"alpha\",\n            get: ->\n                if not @_alpha\n                    @_alpha = options.alpha or 1\n\n                @_alpha\n\n            set: (alpha) ->\n                @_alpha = alpha\n\n            configurable: true\n        @alpha = (if (typeof (options.alpha) is \"undefined\") then 1 else options.alpha)\n        \n        ###\n        @attribute rotation\n        @type {Number}\n        @default 0\n        ###\n        @rotation = options.rotation or 0\n        \n        ###\n        @attribute smooth\n        @type {Boolean}\n        @default false\n        ###\n        @smooth = (if (typeof (options.smooth) is \"undefined\") then true else options.smooth)\n        \n        @_matrix = Matrix2d.identity.clone()\n\n        Object.defineProperty @, \"position\",\n            get:->\n                if not @_position\n                    @_position = new Vector2d 0, 0\n                @_position\n            set: (vector)->\n                @_position = vector.clone()\n\n        Object.defineProperty @, \"x\",\n            get:->\n                @position.x or 0\n            set: (x)->\n                @position.x = x\n        @x = options.x if options.x\n        \n        Object.defineProperty @, \"y\",\n            get:->\n                @position.y or 0\n            set: (y)->\n                @position.y = y\n        @y = options.y if options.y\n\n        Object.defineProperty @, \"width\",\n            get:->\n                @_width or 0\n            set: (w)->\n                @_width = w\n            configurable: true\n        @width = options.width if options.width\n\n        Object.defineProperty @, \"height\",\n            get:->\n                @_height or 0\n            set: (h)->\n                @_height = h\n            configurable: true\n        @height = options.height if options.height\n\n\n        Object.defineProperty @, \"parent\",\n            get:->\n                @_parent or 'undefined'\n            set: (parent)->\n                @_parent = parent\n                @_parent.addChild @\n        @parent = options.parent if options.parent\n\n        Object.defineProperty @, \"visible\",\n            get:->\n                if @alpha <= 0 or not @_visible\n                    return false\n                return true\n            set: (visibility)->\n                @_visible = Boolean visibility\n        @visible = (options.visible if options.visible) or true\n\n\n    render: (ctx)->\n        if not @visible\n            return\n\n        bit = false: -1, true: 1\n\n        mtx = Matrix2d.identity.appendTransform(\n            @position.x + @width * (@flipX + 0),\n            @position.y + @height * (@flipY + 0),\n            @scale.x * bit[not @flipX],\n            @scale.y * bit[not @flipY],\n            @rotation,\n            @skew.x,\n            @skew.y,\n            @pivot.x,\n            @pivot.y\n            )\n        # console.log @_matrix.clone().identity(), mtx\n        ctx.save()\n        ctx.beginPath()\n        ctx.scale @scale.x, @scale.y\n        ctx.translate @position.x, @position.y\n\n        ctx.transform mtx.m11, mtx.m12, mtx.m21, mtx.m22, mtx.dx, mtx.dy\n        ctx.rotate 0.0174532925 * @rotation\n        ctx.setAlpha @alpha\n        ctx.globalCompositeOperation = @compositeOperation    if @compositeOperation\n        ctx[Support.imageSmoothingEnabled] = @smooth\n\n        ctx.setAlpha @alpha\n        @_render(ctx) if @_render\n\n        ctx.scale 1/@scale.x, 1/@scale.y\n        ctx.translate -@position.x, -@position.y\n        ctx.closePath()\n        ctx.restore()\n\n        @dispatchEvent 'render'\n\n    ###\n    @method toString\n    @return {String} String representation of object\n    ###\n    toString: ()->\n        \"<Widget (#{@id})>\"\n","Widget = require \"./widget\"\n\n###\nBase widgets container\n@note GameCore.exports.ui.Container\n###\nmodule.exports = class Container extends Widget\n    constructor: (options={})->\n        super options\n        @children = {}\n\n    addChild: (child)->\n        if child.parent is not @\n            child.parent = @\n        else\n            @children[child.id] = child\n\n    _render:(ctx)->\n        for cid, child of @children\n            child.render ctx\n\n    render:(ctx)->\n        super ctx\n\n\n","Widget = require \"./widget\"\nColor = require \"../utils/color\"\nFont = require \"../utils/font\"\n\n###\nObject.defineProperty this, BASELINE\n@static\n###\nBASELINE =  \n    ###\n    Object.defineProperty this, BASELINE.TOP\n    @type {String}\n    @static\n    ###\n    TOP: \"top\"\n\n    ###\n    Object.defineProperty this, BASELINE.HANGING\n    @type {String}\n    @static\n    ###\n    HANGING: \"hanging\"\n\n    ###\n    Object.defineProperty this, BASELINE.MIDDLE\n    @type {String}\n    @static\n    ###\n    MIDDLE: \"middle\"\n\n    ###\n    Object.defineProperty this, BASELINE.ALPHABETIC\n    @type {String}\n    @static\n    ###\n    ALPHABETIC: \"alphabetic\"\n\n    ###\n    Object.defineProperty this, BASELINE.IDEOGRAPHIC\n    @type {String}\n    @static\n    ###\n    IDEOGRAPHIC: \"ideographic\"\n\n    ###\n    Object.defineProperty this, BASELINE.BOTTOM\n    @type {String}\n    @static\n    ###\n    BOTTOM: \"bottom\"\n\n\n#  Default values\nDEFAULT_FONT = new Font()\nDEFAULT_COLOR = new Color(\"black\")\nDEFAULT_ALIGN = \"left\"\nDEFAULT_BASELINE = BASELINE.TOP\n\n###\nBase Text widget\n@note GameCore.exports.ui.Text\n###\nclass Text extends Widget\n    ###\n    @class Text\n    @extends DisplayObject\n\n    @param {Object} options any attribute may be initialized by option\n    @param {String} [options.text] default - \"\"\n    @param {String} [options.font] default - \"Normal 12px Verdana\"\n    @param {String} [options.align] default - \"left\"\n    @param {String} [options.baseline] default - Joy.Text.BASELINE.TOP\n    @param {String} [options.color] default - #000000\n\n    @constructor\n    ###\n    constructor: (options = {}) ->\n        super options\n\n        ###\n        Text to be displayed\n        @attribute text\n        @default \"\"\n        @type {String}\n        ###\n        @text = options.text or \"\"\n\n        ###\n        Font family and size\n        @attribute font\n        @default \"Normal 12px Verdana\"\n        @type {String}\n        ###\n        Object.defineProperty @, 'font',\n            get: ()->\n                if not @_font\n                    @font = options.font or DEFAULT_FONT\n                @_font\n\n            set: (font)->\n                @_font = font\n                @__measure = Text.MeasureText @text, @_font\n\n        ###\n        Text horizontal alignment\n        @attribute align\n        @default \"left\"\n        @type {String}\n        ###\n        @align = options.align or DEFAULT_ALIGN\n\n        ###\n        Text vertical baseline\n        @attribute baseline\n        @default Joy.Text.BASELINE.TOP\n        @type {String}\n        ###\n        @baseline = options.baseline or DEFAULT_BASELINE\n\n        ###\n        Color of the text\n        @attribute color\n        @default \"#000000\"\n        @type {String, Color}\n        ###\n        Object.defineProperty this, \"color\",\n            get: ->\n                if not @_color\n                    @color = options.color or DEFAULT_COLOR\n\n                @_color\n\n            set: (color) ->\n                @_color = if typeof color is \"string\" then new Color(color) else color\n                @alpha = @_color.a\n\n            configurable: true\n\n        if options.stroke\n            @useStroke()\n        else\n            @useFill()\n\n\n        Object.defineProperty @, \"width\",\n            get:->\n                if not @__measure\n                    @__measure = Text.MeasureText @text, @font\n\n                if @__measure then @__measure.width else 0\n\n        Object.defineProperty @, \"height\",\n            get:->\n                if not @__measure\n                    @__measure = Text.MeasureText @text, @font\n\n                if @__measure then @__measure.height else 0\n    ###\n    @method useStroke\n    ###\n    useStroke: ->\n        @stroke = true\n        @fillMethod = \"strokeText\"\n        @styleMethod = \"strokeStyle\"\n\n    ###\n    @method useFill\n    ###\n    useFill: ->\n        @stroke = false\n        @fillMethod = \"fillText\"\n        @styleMethod = \"fillStyle\"\n\n    _render: (ctx) ->\n        ctx.font = @font.toString()\n        ctx.textAlign = @align\n        ctx.textBaseline = @baseline\n        ctx[@styleMethod] = @color.toString()\n        ctx[@fillMethod] @text, 0, 0\n        @getMeasure ctx\n\n    ###\n    @method getMeasure\n    @return {TextMetrics} text metrics\n    ###\n    getMeasure: (ctx)->\n        @__measure = {}\n        m = Text.MeasureText @text,  @font\n        @__measure.width = m[0]\n        @__measure.height = m[1]\n\n\n    ###\n    @method toString\n    @return {String} String representation of object\n    ###\n    toString: ()->\n        \"#{@text}\"\n\n    Text.BASELINE = BASELINE\n    \n    @MeasureText: (text, font) ->\n        # This global variable is used to cache repeated calls with the same arguments\n        str = text + \":\" + font \n        return @__measuretext_cache__[str]  if typeof (@__measuretext_cache__) is \"object\" and @__measuretext_cache__[str]\n\n        div = document.createElement(\"DIV\")\n        div.innerHTML = text\n        div.style.position = \"absolute\"\n        div.style.top = \"-100px\"\n        div.style.left = \"-100px\"\n        div.style.font = font.toString()\n\n        document.body.appendChild div\n        size = [div.offsetWidth, div.offsetHeight]\n        document.body.removeChild div\n\n        # Add the sizes to the cache as adding DOM elements is costly and can cause slow downs\n        @__measuretext_cache__ = {}  unless typeof (@__measuretext_cache__) is \"object\"\n        @__measuretext_cache__[str] = size\n        size\n\n\nmodule.exports = Text","Widget = require \"./widget\"\nColor = require \"../utils/color\"\n\nmodule.exports = class Sprite extends Widget\n    constructor: (options={})->\n        super options\n        self = @\n        @loaded = false\n        if not options.image\n            throw new Error('Not found required `src` or `image` atribute in options.') if not options.src\n            @image = new Image()\n            @image.src = options.src\n        else\n            @image = options.image\n\n        @image.addEventListener 'load', ->\n                self.on_load.apply self, [options.width or false, options.height or false]\n\n    on_load: (w,h)->\n        @loaded = true\n        if not w\n            @width = @image.width\n        if not h\n            @height= @image.height\n\n    _render: (ctx)->\n        if @loaded\n            ctx.drawImage @image, 0, 0, @width, @height\n        else\n            ctx.fillRect 0, 0, @width, @height\n\n    clone: ->\n        new Sprite\n            width: @width\n            height: @height\n            image: @image\n            parent: @parent\n            position: @position\n            visible: @visible\n            alpha: @alpha\n\n    ###\n    @method toString\n    @return {String} String representation of object\n    ###\n    toString: ()->\n        \"<Sprite (#{@id})>\"\n\n","module.exports = \n    Circle: require \"./circle\"\n    Rect: require \"./rect\"","###\n2D Matrix manipulations\n\n@note GameCore.exports.Math.Matrix2D\n\n###\nclass Matrix2D\n    ###           \n    Multiplier for converting degrees to radians. Used internally by Matrix2D.\n\n    @attribute DEG_TO_RAD\n    @static\n    @readonly\n    @return {Number}\n    ###\n    @DEG_TO_RAD:  Math.PI / 180\n\n    ###\n    Based on [EaselJS](https://github.com/CreateJS/EaselJS/) Matrix2D implementation.\n\n    @class Matrix2D\n    @constructor\n\n    @param {Number} m11\n    @param {Number} m12\n    @param {Number} m21\n    @param {Number} m22\n    @param {Number} dx\n    @param {Number} dy\n    ###\n    constructor: (m11, m12, m21, m22, dx, dy) ->\n        @m11 = m11  if m11 isnt null\n        @m12 = m12 or 0\n        @m21 = m21 or 0\n        @m22 = m22  if m22 isnt null\n        @dx = dx or 0\n        @dy = dy or 0\n    \n    ###\n    Generates matrix properties from the specified display object transform properties, and appends them with this matrix.\n    For example, you can use this to generate m11 matrix from m11 display object: var mtx = new Matrix2D();\n    mtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\n    @method appendTransform\n    @param {Number} x\n    @param {Number} y\n    @param {Number} scaleX\n    @param {Number} scaleY\n    @param {Number} rotation\n    @param {Number} skewX\n    @param {Number} skewY\n    @param {Number} pivotX Optional.\n    @param {Number} pivotY Optional.\n    @return {Matrix2D} This matrix. Useful for chaining method calls.\n    ###\n    appendTransform: (x, y, scaleX, scaleY, rotation, skewX, skewY, pivotX, pivotY) ->\n        cos = undefined\n        sin = undefined\n        r = undefined\n\n        if rotation % 360\n            r = rotation * Matrix2D.DEG_TO_RAD\n            cos = Math.cos(r)\n            sin = Math.sin(r)\n        else\n            cos = 1\n            sin = 0\n        \n        if skewX or skewY\n            # TODO: can this be combined into m11 single append?\n            skewX *= Matrix2D.DEG_TO_RAD\n            skewY *= Matrix2D.DEG_TO_RAD\n            @append Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y\n            @append cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0\n        else\n            @append cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y\n        \n        if pivotX or pivotY  \n            # prepend the registration offset:\n            @dx -= pivotX * @m11 + pivotY * @m21\n            @dy -= pivotX * @m12 + pivotY * @m22\n        @\n\n    ###\n    Appends the specified matrix properties with this matrix. All parameters are required.\n    @method append\n    @param {Number} m11\n    @param {Number} m12\n    @param {Number} m21\n    @param {Number} m22\n    @param {Number} dx\n    @param {Number} dy\n    @return {Matrix2D} This matrix. Useful for chaining method calls.\n    ###\n    append: (m11, m12, m21, m22, dx, dy) ->\n        a1 = @m11\n        b1 = @m12\n        c1 = @m21\n        d1 = @m22\n        @m11 = m11 * a1 + m12 * c1\n        @m12 = m11 * b1 + m12 * d1\n        @m21 = m21 * a1 + m22 * c1\n        @m22 = m21 * b1 + m22 * d1\n        @dx = dx * a1 + dy * c1 + @dx\n        @dy = dx * b1 + dy * d1 + @dy\n        @\n\n    ###\n    Inverts the matrix, causing it to perform the opposite transformation.\n    @method invert\n    @return {Matrix2D} this\n    ###\n    invert: ->\n        a1 = @m11\n        b1 = @m12\n        c1 = @m21\n        d1 = @m22\n        tx1 = @dx\n        n = a1 * d1 - b1 * c1\n        @m11 = d1 / n\n        @m12 = -b1 / n\n        @m21 = -c1 / n\n        @m22 = a1 / n\n        @dx = (c1 * @dy - d1 * tx1) / n\n        @dy = -(a1 * @dy - b1 * tx1) / n\n        @\n\n    ###\n    Clone Matrix2D instance\n    @return {Matrix2D}\n    ###\n    clone: ->\n        new Matrix2D(@m11, @m12, @m21, @m22, @dx, @dy)\n\n\n    ###\n    Reset matrix to it's identity\n    @return {Matrix2D} this\n    ###\n    identity: ->\n        @m11 = @m22 = 1\n        @m12 = @m21 = @dx = @dy = 0\n        @\n        \n    @identity: new Matrix2D(1, 0, 0, 1, 0, 0)\n\nmodule.exports = Matrix2D\n","###\n2D Vector manipulations\n\n@note GameCore.exports.Math.Vector2D\n\n###\nclass Vector2d\n    constructor: (@x=0, @y=0) ->\n        ###\n        Get the magnitude of this vector\n        @attribute length\n        @readonly\n        ###\n        Object.defineProperty this, \"length\",\n            get: ->\n                Math.sqrt (@x * @x) + (@y * @y)\n\n            configurable: true\n\n\n        ###\n        Get this vector with a magnitude of 1.\n        @attribute normalized\n        @readonly\n        ###\n        Object.defineProperty this, \"normalized\",\n            get: ->\n                magnitude = @length\n                new Vector2d @x / magnitude, @y / magnitude\n\n            configurable: true\n\n    ###\n    @method set\n    @param {Number} x\n    @param {Number} y\n    @return {Vector2d}\n    ###\n    set: (@x, @y) ->\n        @\n        \n    ###\n    @method sum\n    @param {Vector2d} vector2d\n    @return {Vector2d}\n    ###\n    subtract: (vector2d) ->\n        @x -= vector2d.x\n        @y -= vector2d.y\n        @\n\n    ###\n    @method sum\n    @param {Vector2d} vector2d\n    @return {Vector2d}\n    ###\n    sum: (vector2d) ->\n        @x += vector2d.x\n        @y += vector2d.y\n        @\n\n    ###\n    @method scale\n    @param {Number} x (or x y)\n    @param {Number} y\n    @return {Vector2d}\n    ###\n    scale: (x, y) ->\n        @x *= x\n        @y *= y or x\n        @\n\n\n    ###\n    @method clone\n    @return {Vector2d}\n    ###\n    clone: ->\n        new Vector2d @x, @y\n\n\n    ###\n    Return unit vector\n    @return {Vector2d}\n    ###\n    unit: ->\n        new Vector2d Math.cos(@x), Math.sin(@y)\n\n\n    ###\n    Normalize this vector\n    @return {Vector2d}\n    ###\n    normalize: ->\n        normal = @normalized\n        @x = normal.x\n        @y = normal.y\n        @\n\n\n    ###\n    Get the distance between this vector and the argument vector\n    @param {Vector2d} vector\n    @return {Number}\n    ###\n    @distance: (v1, v2) ->\n        xdiff = v1.x - v2.x\n        ydiff = v1.y - v2.y\n        Math.sqrt xdiff * xdiff + ydiff * ydiff\n\n\n    ###\n    @method toString\n    @return {String}\n    ###\n    toString: ->\n        \"#<Vector2d @x=#{@x}, @y=#{@y}>\"\n\n    @LEFT = new Vector2d -1, 0\n    @RIGHT = new Vector2d 1, 0\n    @TOP = new Vector2d 0, -1\n    @BOTTOM = new Vector2d 0, 1\n\nmodule.exports = Vector2d","###\nMathematical functions\n\n@note GameCore.exports.Math.Math\n\n@see http://docs.closure-library.googlecode.com/git-history/418ef20b29e8f3ebb5121266ec7206ae6943d28d/closure_goog_math_math.js.source.html\n###\nclass Mathematics\n\n    ###\n    Clamping a number into a limits\n    \n    @method clamp\n    @param {Number} num\n    @param {Number} min\n    @param {Number} max\n    @return {Number}\n    ###\n    @clamp: (num, min, max)->\n        Math.min(Math.max(num, min), max)\n\n    ###\n    Alias to @clamp(num, 0, 1)\n    \n    @method clamp01\n    @param {Number} num\n    @return {Number}\n    ###\n    @clamp01: (num)->\n        @clamp num, 0, 1\n\n\n    ###\n    Returns a random integer greater than or equal to $min and less than $max.\n    \n    @param {Number} a  The lower bound for the random integer inclusive (default=0).\n    @param {Number} a  The upper bound for the random integer exlusive (default=1000).\n    @return {Number} A random integer N such that $min <= N < $max.\n    ###\n    @randomInt: (min=0, max=100)->\n        Math.floor min + Math.random() * (max-min)\n\n    ###\n    The % operator in JavaScript returns the remainder of a / b, but differs from\n    some other languages in that the result will have the same sign as the\n    dividend. For example, -1 % 8 == -1, whereas in some other languages\n    (such as Python) the result would be 7. This function emulates the more\n    correct modulo behavior, which is useful for certain applications such as\n    calculating an offset index in a circular list.\n \n    @param {number} a The dividend.\n    @param {number} b The divisor.\n    @return {number} a % b where the result is between 0 and b (either 0 <= x < b\n      or b < x <= 0, depending on the sign of b).\n    ###\n    @modulo: (a,b)->\n        r = a%b\n        if r * b < 0 then r + b else r\n\n    ###\n    Performs linear interpolation between values a and b. Returns the value\n    between a and b proportional to x (when x is between 0 and 1. When x is\n    outside this range, the return value is a linear extrapolation).\n\n    @param {number} a A number.\n    @param {number} b A number.\n    @param {number} x The proportion between a and b.\n    @return {number} The interpolated value between a and b.\n    ###\n    @lerp: (a,b,x)->\n        a + x * (b - a)\n\n    ###\n    Tests whether the two values are equal to each other, within a certain\n    tolerance to adjust for floating pount errors.\n    \n    @param {Number} a A number.\n    @param {Number} b A number.\n    @param {Number=} opt_tolerance Optional tolerance range.\n        Defaults to 0.000001. If specified, should be greater than 0.\n    @return {Boolean} Whether $a and $b are nearly equal.\n    ###\n    @nearlyEquals: (a, b, opt_tolerance=0.000001)->\n        Math.abs(a - b) <= opt_tolerance\n\nmodule.exports = Mathematics","###\nInspired by TinyColor\n@see https://github.com/bgrins/TinyColor\n###\n\nMathematic = require \"../math/math\"\n\n###\n###\nCOLOR_NAMES =\n    aliceblue: \"f0f8ff\"\n    antiquewhite: \"faebd7\"\n    aqua: \"0ff\"\n    aquamarine: \"7fffd4\"\n    azure: \"f0ffff\"\n    beige: \"f5f5dc\"\n    bisque: \"ffe4c4\"\n    black: \"000\"\n    blanchedalmond: \"ffebcd\"\n    blue: \"00f\"\n    blueviolet: \"8a2be2\"\n    brown: \"a52a2a\"\n    burlywood: \"deb887\"\n    burntsienna: \"ea7e5d\"\n    cadetblue: \"5f9ea0\"\n    chartreuse: \"7fff00\"\n    chocolate: \"d2691e\"\n    coral: \"ff7f50\"\n    cornflowerblue: \"6495ed\"\n    cornsilk: \"fff8dc\"\n    crimson: \"dc143c\"\n    cyan: \"0ff\"\n    darkblue: \"00008b\"\n    darkcyan: \"008b8b\"\n    darkgoldenrod: \"b8860b\"\n    darkgray: \"a9a9a9\"\n    darkgreen: \"006400\"\n    darkgrey: \"a9a9a9\"\n    darkkhaki: \"bdb76b\"\n    darkmagenta: \"8b008b\"\n    darkolivegreen: \"556b2f\"\n    darkorange: \"ff8c00\"\n    darkorchid: \"9932cc\"\n    darkred: \"8b0000\"\n    darksalmon: \"e9967a\"\n    darkseagreen: \"8fbc8f\"\n    darkslateblue: \"483d8b\"\n    darkslategray: \"2f4f4f\"\n    darkslategrey: \"2f4f4f\"\n    darkturquoise: \"00ced1\"\n    darkviolet: \"9400d3\"\n    deeppink: \"ff1493\"\n    deepskyblue: \"00bfff\"\n    dimgray: \"696969\"\n    dimgrey: \"696969\"\n    dodgerblue: \"1e90ff\"\n    firebrick: \"b22222\"\n    floralwhite: \"fffaf0\"\n    forestgreen: \"228b22\"\n    fuchsia: \"f0f\"\n    gainsboro: \"dcdcdc\"\n    ghostwhite: \"f8f8ff\"\n    gold: \"ffd700\"\n    goldenrod: \"daa520\"\n    gray: \"808080\"\n    green: \"008000\"\n    greenyellow: \"adff2f\"\n    grey: \"808080\"\n    honeydew: \"f0fff0\"\n    hotpink: \"ff69b4\"\n    indianred: \"cd5c5c\"\n    indigo: \"4b0082\"\n    ivory: \"fffff0\"\n    khaki: \"f0e68c\"\n    lavender: \"e6e6fa\"\n    lavenderblush: \"fff0f5\"\n    lawngreen: \"7cfc00\"\n    lemonchiffon: \"fffacd\"\n    lightblue: \"add8e6\"\n    lightcoral: \"f08080\"\n    lightcyan: \"e0ffff\"\n    lightgoldenrodyellow: \"fafad2\"\n    lightgray: \"d3d3d3\"\n    lightgreen: \"90ee90\"\n    lightgrey: \"d3d3d3\"\n    lightpink: \"ffb6c1\"\n    lightsalmon: \"ffa07a\"\n    lightseagreen: \"20b2aa\"\n    lightskyblue: \"87cefa\"\n    lightslategray: \"789\"\n    lightslategrey: \"789\"\n    lightsteelblue: \"b0c4de\"\n    lightyellow: \"ffffe0\"\n    lime: \"0f0\"\n    limegreen: \"32cd32\"\n    linen: \"faf0e6\"\n    magenta: \"f0f\"\n    maroon: \"800000\"\n    mediumaquamarine: \"66cdaa\"\n    mediumblue: \"0000cd\"\n    mediumorchid: \"ba55d3\"\n    mediumpurple: \"9370db\"\n    mediumseagreen: \"3cb371\"\n    mediumslateblue: \"7b68ee\"\n    mediumspringgreen: \"00fa9a\"\n    mediumturquoise: \"48d1cc\"\n    mediumvioletred: \"c71585\"\n    midnightblue: \"191970\"\n    mintcream: \"f5fffa\"\n    mistyrose: \"ffe4e1\"\n    moccasin: \"ffe4b5\"\n    navajowhite: \"ffdead\"\n    navy: \"000080\"\n    oldlace: \"fdf5e6\"\n    olive: \"808000\"\n    olivedrab: \"6b8e23\"\n    orange: \"ffa500\"\n    orangered: \"ff4500\"\n    orchid: \"da70d6\"\n    palegoldenrod: \"eee8aa\"\n    palegreen: \"98fb98\"\n    paleturquoise: \"afeeee\"\n    palevioletred: \"db7093\"\n    papayawhip: \"ffefd5\"\n    peachpuff: \"ffdab9\"\n    peru: \"cd853f\"\n    pink: \"ffc0cb\"\n    plum: \"dda0dd\"\n    powderblue: \"b0e0e6\"\n    purple: \"800080\"\n    red: \"f00\"\n    rosybrown: \"bc8f8f\"\n    royalblue: \"4169e1\"\n    saddlebrown: \"8b4513\"\n    salmon: \"fa8072\"\n    sandybrown: \"f4a460\"\n    seagreen: \"2e8b57\"\n    seashell: \"fff5ee\"\n    sienna: \"a0522d\"\n    silver: \"c0c0c0\"\n    skyblue: \"87ceeb\"\n    slateblue: \"6a5acd\"\n    slategray: \"708090\"\n    slategrey: \"708090\"\n    snow: \"fffafa\"\n    springgreen: \"00ff7f\"\n    steelblue: \"4682b4\"\n    tan: \"d2b48c\"\n    teal: \"008080\"\n    thistle: \"d8bfd8\"\n    tomato: \"ff6347\"\n    turquoise: \"40e0d0\"\n    violet: \"ee82ee\"\n    wheat: \"f5deb3\"\n    white: \"fff\"\n    whitesmoke: \"f5f5f5\"\n    yellow: \"ff0\"\n    yellowgreen: \"9acd32\"\n\ntrimLeft = /^[\\s,#]+/\ntrimRight = /\\s+$/\n\n# `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nflip = (o) ->\n    flipped = {}\n    for k,v of o\n      flipped[v] = k\n    flipped\n\n# Take input from [0, n] and return it as [0, 1]\nbound01 = (n, max) ->\n    n = \"100%\"  if isOnePointZero(n)\n    processPercent = isPercentage(n)\n    n = Math.min(max, Math.max(0, parseFloat(n)))\n\n    # Automatically convert percentage into number\n    n = parseInt(n * max, 10) / 100  if processPercent\n\n    # Handle floating point rounding errors\n    return 1  if Math.abs(n - max) < 0.000001\n\n    # Convert into [0, 1] range if it isn't already\n    (n % max) / parseFloat(max)\n\n# Parse an integer into hex\nparseHex = (val) ->\n    parseInt val, 16\n\n# Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n# <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nisOnePointZero = (n) ->\n    typeof n is \"string\" and n.indexOf(\".\") isnt -1 and parseFloat(n) is 1\n\n# Check to see if string passed in is a percentage\nisPercentage = (n) ->\n    typeof n is \"string\" and n.indexOf(\"%\") isnt -1\n\n# Force a hex value to have 2 characters\npad2 = (c) ->\n    (if c.length is 1 then \"0\" + c else \"\" + c)\n\n# Replace a decimal with it's percentage value\nconvertToPercentage = (n) ->\n    n = (n * 100) + \"%\"  if n <= 1\n    n\n\nCOLOR_NAMES_F = flip(COLOR_NAMES)\n\n\nCSS_INTEGER = \"[-\\\\+]?\\\\d+%?\"\nCSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\"\nCSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\"\nPERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\"\nPERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\"\n\nmatchers =\n    rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3)\n    rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4)\n    hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3)\n    hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4)\n    hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3)\n    hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/\n    hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n\n\n###\nColor operations\n\n@note GameCore.exports.utils.Color\n###\nmodule.exports = class Color\n    ###\n    @param {String | Color} hex color string or color name or Color instance\n    @param {Object} options\n    ###\n    constructor: (options={}) ->\n        color = if not options.color then options else options.color or 'black'\n        rgb = Color.inputToRGB(color)\n        \n        @r = rgb.r\n        @g = rgb.g\n        @b = rgb.b\n        @a = options.alpha or rgb.a\n        \n        format = options.format or rgb.format or false\n        \n        Object.defineProperty @, \"roundA\",\n            get: ()->\n                Math.round(100 * @a) / 100\n\n\n        # Don't let the range of [0,255] come back in [0,1].\n        # Potentially lose a little bit of precision here, but will fix issues where\n        # .5 gets interpreted as half of the total, instead of half of 1\n        # If it was supposed to be 128, this was already taken care of by `inputToRgb`\n        @r = Math.round(@r)  if @r < 1\n        @g = Math.round(@g)  if @g < 1\n        @b = Math.round(@b)  if @b < 1\n\n    ###\n    @method toHsv\n    @return {Object} {h,s,v,a}\n    ###\n    toHsv: ->\n        hsv = Color.rgbToHsv(@r, @g, @b)\n        h: hsv.h * 360\n        s: hsv.s\n        v: hsv.v\n        a: @a\n\n    ###\n    @method toHsvString\n    @return {String}\n    ###\n    toHsvString: ->\n        hsv = Color.rgbToHsv(@r, @g, @b)\n        h = Math.round(hsv.h * 360)\n        s = Math.round(hsv.s * 100)\n        v = Math.round(hsv.v * 100)\n        (if (@a is 1) then \"hsv(\" + h + \", \" + s + \"%, \" + v + \"%)\" else \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \" + @roundA + \")\")\n\n    ###\n    @method toHsl\n    @return {Object} {h,s,l,a}\n    ###\n    toHsl: ->\n        hsl = Color.rgbToHsl(@r, @g, @b)\n\n        h: hsl.h * 360\n        s: hsl.s\n        l: hsl.l\n        a: @a\n\n    ###\n    @method toHslString\n    @return {String}\n    ###\n    toHslString: ->\n        hsl = Color.rgbToHsl(@r, @g, @b)\n        h = Math.round(hsl.h * 360)\n        s = Math.round(hsl.s * 100)\n        l = Math.round(hsl.l * 100)\n        if (@a is 1) then  \"hsl(\" + h + \", \" + s + \"%, \" + l + \"%)\" else \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \" + @roundA + \")\"\n\n    ###\n    @method toHex\n    @param {Boolean} allow3Char defaults=false\n    @return {String}\n    ###\n    toHex: (allow3Char=false) ->\n        Color.rgbToHex @r, @g, @b, allow3Char\n\n    ###\n    @method toHexString\n    @param {Boolean} allow3Char defaults=false\n    @return {String} # + toHex()\n    ###\n    toHexString: (allow3Char=false) ->\n        \"#\" + @toHex allow3Char\n\n    ###\n    @method toRgb\n    @return {Object} {r,g,b,a}\n    ###\n    toRgb: ->\n        r: Math.round(@r)\n        g: Math.round(@g)\n        b: Math.round(@b)\n        a: @a\n\n    ###\n    @method toRgbString\n    @return {String}\n    ###\n    toRgbString: ->\n        (if (@a is 1) then \"rgb(\" + Math.round(@r) + \", \" + Math.round(@g) + \", \" + Math.round(@b) + \")\" else \"rgba(\" + Math.round(@r) + \", \" + Math.round(@g) + \", \" + Math.round(@b) + \", \" + @roundA + \")\")\n\n\n    toPercentageRgb: ->\n        r: Math.round(bound01(@r, 255) * 100) + \"%\"\n        g: Math.round(bound01(@g, 255) * 100) + \"%\"\n        b: Math.round(bound01(@b, 255) * 100) + \"%\"\n        a: @a\n\n    toPercentageRgbString: ->\n        (if (@a is 1) then \"rgb(\" + Math.round(bound01(@r, 255) * 100) + \"%, \" + Math.round(bound01(@g, 255) * 100) + \"%, \" + Math.round(bound01(@b, 255) * 100) + \"%)\" else \"rgba(\" + Math.round(bound01(@r, 255) * 100) + \"%, \" + Math.round(bound01(@g, 255) * 100) + \"%, \" + Math.round(bound01(@b, 255) * 100) + \"%, \" + @a + \")\")\n\n    toName: ->\n        return \"transparent\"  if @a is 0\n        COLOR_NAMES_F[Color.rgbToHex(@r, @g, @b, true)] or false\n\n    ###\n    Outputing current color as string\n    ###\n    toString: (format) ->\n        formatSet = !!format\n        format = format or @format\n        formattedString = false\n        hasAlphaAndFormatNotSet = not formatSet and @a < 1 and @a > 0\n        formatWithAlpha = hasAlphaAndFormatNotSet and (format is \"hex\" or format is \"hex6\" or format is \"hex3\" or format is \"name\")\n        formattedString = @toRgbString()  if format is \"rgb\"\n        formattedString = @toPercentageRgbString()  if format is \"prgb\"\n        formattedString = @toHexString()  if format is \"hex\" or format is \"hex6\"\n        formattedString = @toHexString(true)  if format is \"hex3\"\n        formattedString = @toName()  if format is \"name\"\n        formattedString = @toHslString()  if format is \"hsl\"\n        formattedString = @toHsvString()  if format is \"hsv\"\n        \n        return if formatWithAlpha then @toRgbString() else formattedString or @toHexString()\n\n    ###\n    ###\n    readable: (color)->\n        Color.readable @, color\n\n    tetrad: ()->\n        Color.tetrad @\n\n    equals: (color)->\n        Color.equals @, color\n\n    desaturate: (amount=10)->\n        color = Color.desaturate @, amount\n        rgb = color.toRgb()\n        @r = rgb.r\n        @g = rgb.g\n        @b = rgb.b\n        @\n\n    clone: ()->\n        new Color @toString()\n\n    darken: (amount=10)->\n        color = Color.darken @, amount\n        rgb = color.toRgb()\n        @r = rgb.r\n        @g = rgb.g\n        @b = rgb.b\n        @\n\n    lighten: (amount=10)->\n        color = Color.lighten @, amount\n        rgb = color.toRgb()\n        @r = rgb.r\n        @g = rgb.g\n        @b = rgb.b\n        @\n    ###\n    If input is an object, force 1 into \"1.0\" to handle ratios properly\n    String input requires \"1.0\" as input, so 1 will be treated as 1\n\n    Given a string or object, convert that input to RGB\n    Possible string inputs:\n    \n    \"red\"\n    \"#f00\" or \"f00\"\n    \"#ff0000\" or \"ff0000\"\n    \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n    \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n    \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n    \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n    \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n    \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n    \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n    \n    @param {String | Color} color\n    \n    ###\n    @inputToRGB: (color) ->\n        rgb =\n            r: 0\n            g: 0\n            b: 0\n\n        a = 1\n        ok = false\n        format = false\n        color = stringInputToObject(color)  if typeof color is \"string\"\n        if typeof color is \"object\"\n            if color.hasOwnProperty(\"r\") and color.hasOwnProperty(\"g\") and color.hasOwnProperty(\"b\")\n                rgb = Color.rgbToRgb(color.r, color.g, color.b)\n                ok = true\n                format = (if String(color.r).substr(-1) is \"%\" then \"prgb\" else \"rgb\")\n\n            else if color.hasOwnProperty(\"h\") and color.hasOwnProperty(\"s\") and color.hasOwnProperty(\"v\")\n                color.s = convertToPercentage(color.s)\n                color.v = convertToPercentage(color.v)\n                \n                rgb = Color.hsvToRgb(color.h, color.s, color.v)\n                ok = true\n                format = \"hsv\"\n\n            else if color.hasOwnProperty(\"h\") and color.hasOwnProperty(\"s\") and color.hasOwnProperty(\"l\")\n                color.s = convertToPercentage(color.s)\n                color.l = convertToPercentage(color.l)\n\n                rgb = Color.hslToRgb(color.h, color.s, color.l)\n                ok = true\n                format = \"hsl\"\n\n            a = color.a  if color.hasOwnProperty(\"a\")\n        a = parseFloat(a)\n\n        # Handle invalid alpha characters by setting to 1\n        a = 1  if isNaN(a) or a < 0 or a > 1\n        \n        ok: ok\n        format: color.format or format\n        r: Math.min(255, Math.max(rgb.r, 0))\n        g: Math.min(255, Math.max(rgb.g, 0))\n        b: Math.min(255, Math.max(rgb.b, 0))\n        a: a\n\n    # Conversion Functions\n    # --------------------    \n    # `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n    # <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n    \n    ###\n    Handle bounds / percentage checking to conform to CSS color spec\n    <http://www.w3.org/TR/css3-color/>\n    \n    @method rgbToRgb\n\n    @param {Integer} r in 0..255 or 0..1\n    @param {Integer} g in 0..255 or 0..1\n    @param {Integer} b in 0..255 or 0..1\n    \n    @return {Object} { r, g, b } in 0..255\n    ###\n    @rgbToRgb: (r, g, b) ->\n        r: bound01(r, 255) * 255\n        g: bound01(g, 255) * 255\n        b: bound01(b, 255) * 255\n\n    ###\n    Converts an RGB color value to HSL.\n    \n    @method rgbToHsl\n    \n    @param {Integer} r in 0..255 or 0..1\n    @param {Integer} g in 0..255 or 0..1\n    @param {Integer} b in 0..255 or 0..1\n    \n    @return {Object} { h, s, l } in 0..1\n    ###\n    @rgbToHsl: (r, g, b) ->\n        r = bound01(r, 255)\n        g = bound01(g, 255)\n        b = bound01(b, 255)\n\n        max = Math.max(r, g, b)\n        min = Math.min(r, g, b)\n        \n        h = undefined\n        s = undefined\n        l = (max + min) / 2\n\n        if max is min\n            h = s = 0 # achromatic\n        else\n            d = max - min\n            s = (if l > 0.5 then d / (2 - max - min) else d / (max + min))\n            switch max\n                when r\n                    h = (g - b) / d + ((if g < b then 6 else 0))\n                when g\n                    h = (b - r) / d + 2\n                when b\n                    h = (r - g) / d + 4\n            h /= 6\n\n        h: h\n        s: s\n        l: l\n\n    ###\n    Converts an HSL color value to RGB.\n\n    @method hslToRgb\n    @param {Integer} h in 0..360 or 0..1\n    @param {Integer} s in 0..100 or 0..1\n    @param {Integer} l in 0..100 or 0..1\n    @return {Object} { r, g, b } in 0..255\n    ###\n    @hslToRgb: (h, s, l) ->\n        hue2rgb = (p, q, t) ->\n            t += 1  if t < 0\n            t -= 1  if t > 1\n            return p + (q - p) * 6 * t  if t < 1 / 6\n            return q  if t < 1 / 2\n            return p + (q - p) * (2 / 3 - t) * 6  if t < 2 / 3\n            p\n\n        r = undefined\n        g = undefined\n        b = undefined\n\n        h = bound01(h, 360)\n        s = bound01(s, 100)\n        l = bound01(l, 100)\n        \n        if s is 0\n            r = g = b = l # achromatic\n        else\n            q = (if l < 0.5 then l * (1 + s) else l + s - l * s)\n            p = 2 * l - q\n\n            r = hue2rgb(p, q, h + 1 / 3)\n            g = hue2rgb(p, q, h)\n            b = hue2rgb(p, q, h - 1 / 3)\n\n        r: r * 255\n        g: g * 255\n        b: b * 255\n\n    ###\n    Converts an RGB color value to HSV\n\n    @method rgbToHsv\n    @param {Integer} r in 0..255 or 0..1\n    @param {Integer} g in 0..255 or 0..1\n    @param {Integer} b in 0..255 or 0..1\n    @return {Object} { h, s, v } in 0..1\n    ###\n    @rgbToHsv: (r, g, b) ->\n        r = bound01(r, 255)\n        g = bound01(g, 255)\n        b = bound01(b, 255)\n        \n        max = Math.max(r, g, b)\n        min = Math.min(r, g, b)\n        \n        h = undefined\n        s = undefined\n        v = max\n        d = max - min\n        s = (if max is 0 then 0 else d / max)\n        \n        if max is min\n            h = 0 # achromatic\n        else\n            switch max\n                when r\n                    h = (g - b) / d + ((if g < b then 6 else 0))\n                when g\n                    h = (b - r) / d + 2\n                when b\n                    h = (r - g) / d + 4\n            h /= 6\n\n        h: h\n        s: s\n        v: v\n\n    ###\n    Converts an HSV color value to RGB.\n\n    @method hsvToRgb\n    @param {Integer} h in 0..360 or 0..1\n    @param {Integer} s in 0..100 or 0..1\n    @param {Integer} v in 0..100 or 0..1\n    @return {Object} { r, g, b } in 0..255\n    ###\n    @hsvToRgb: (h, s, v) ->\n        h = bound01(h, 360) * 6\n        s = bound01(s, 100)\n        v = bound01(v, 100)\n\n        i = Math.floor(h)\n        f = h - i\n        p = v * (1 - s)\n        q = v * (1 - f * s)\n        t = v * (1 - (1 - f) * s)\n        mod = i % 6\n        \n        r = [v, q, p, p, t, v][mod]\n        g = [t, v, v, q, p, p][mod]\n        b = [p, p, t, v, v, q][mod]\n        \n        r: r * 255\n        g: g * 255\n        b: b * 255\n\n    ###\n    Converts an RGB color to hex\n\n    @method rgbToHex\n    @param {Integer} r in 0..255\n    @param {Integer} g in 0..255\n    @param {Integer} b in 0..255\n    @param {Boolean} allow3Char\n    @return {String} 3 or 6 character hex\n    ###\n    @rgbToHex: (r, g, b, allow3Char=false) ->\n        hex = [\n            pad2(Math.round(r).toString(16)),\n            pad2(Math.round(g).toString(16)),\n            pad2(Math.round(b).toString(16))\n        ]\n\n        # Return a 3 character hex if possible\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) if allow3Char and hex[0].charAt(0) is hex[0].charAt(1) and hex[1].charAt(0) is hex[1].charAt(1)  and hex[2].charAt(0) is hex[2].charAt(1)\n        hex.join \"\"\n\n###\nPermissive string parsing. Take in a number of formats, and output an object\nbased on detected format.\n@method stringInputToObject\n@param {String | Color} color\n@return {Object} `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n###\nstringInputToObject = (color) ->\n    color = color.replace(trimLeft, \"\").replace(trimRight, \"\").toLowerCase()\n    named = false\n    if COLOR_NAMES[color]\n        color = COLOR_NAMES[color]\n        named = true\n    else if color is \"transparent\"\n        r: 0\n        g: 0\n        b: 0\n        a: 0\n        format: \"name\"\n        \n    # Try to match string input using regular expressions.\n    # Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    # Just return an object and let the conversion functions handle that.\n    # This way the result will be the same whether the Color is initialized with string or object.\n    match = undefined\n    if match = matchers.rgb.exec(color)\n        return (\n            r: match[1]\n            g: match[2]\n            b: match[3]\n        )\n    if match = matchers.rgba.exec(color)\n        return (\n            r: match[1]\n            g: match[2]\n            b: match[3]\n            a: match[4]\n        )\n    if match = matchers.hsl.exec(color)\n        return (\n            h: match[1]\n            s: match[2]\n            l: match[3]\n        )\n    if match = matchers.hsla.exec(color)\n        return (\n            h: match[1]\n            s: match[2]\n            l: match[3]\n            a: match[4]\n        )\n    if match = matchers.hsv.exec(color)\n        return (\n            h: match[1]\n            s: match[2]\n            v: match[3]\n        )\n    if match = matchers.hex6.exec(color)\n        return (\n            r: parseHex(match[1])\n            g: parseHex(match[2])\n            b: parseHex(match[3])\n            format: (if named then \"name\" else \"hex\")\n        )\n    if match = matchers.hex3.exec(color)\n        return (\n            r: parseHex(match[1] + \"\" + match[1])\n            g: parseHex(match[2] + \"\" + match[2])\n            b: parseHex(match[3] + \"\" + match[3])\n            format: (if named then \"name\" else \"hex\")\n        )\n    false\n\n\nColor.fromRatio = (color, opts={}) ->\n    if typeof color is \"object\"\n        newColor = {}\n        for i of color\n            if color.hasOwnProperty(i)\n                if i is \"a\"\n                    newColor[i] = color[i]\n                else\n                    newColor[i] = convertToPercentage(color[i])\n        color = newColor\n    new Color color, opts\n\nColor.equals = (color1, color2) ->\n    return false  if not color1 or not color2\n    (new Color color1).toRgbString() is (new Color color2).toRgbString()\n\nColor.random = ->\n    Color.fromRatio\n        r: Math.random()\n        g: Math.random()\n        b: Math.random()\n\n\nColor.desaturate = (color, amount=10) ->\n    hsl = (new Color color).toHsl()\n    hsl.s -= amount / 100\n    hsl.s = Mathematic.clamp01(hsl.s)\n    new Color hsl\n\nColor.saturate = (color, amount=10) ->\n    hsl = (new Color color).toHsl()\n    hsl.s += amount / 100\n    hsl.s = Mathematic.clamp01(hsl.s)\n    new Color hsl\n\nColor.greyscale = (color) ->\n    Color.desaturate color, 100\n\nColor.lighten = (color, amount=10) ->\n    hsl = (new Color color).toHsl()\n    hsl.l += amount / 100\n    hsl.l = Mathematic.clamp01(hsl.l)\n    new Color hsl\n\nColor.darken = (color, amount=10) ->\n    hsl = (new Color color).toHsl()\n    hsl.l -= amount / 100\n    hsl.l = Mathematic.clamp01(hsl.l)\n    new Color hsl\n\nColor.complement = (color) ->\n    hsl = (new Color color).toHsl()\n    hsl.h = (hsl.h + 180) % 360\n    new Color hsl\n\nColor.triad = (color) ->\n    hsl = (new Color(color)).toHsl()\n    h = hsl.h\n    [\n        new Color(color),\n        new Color(\n            h: (h + 120) % 360\n            s: hsl.s\n            l: hsl.l\n        ),\n        new Color(\n            h: (h + 240) % 360\n            s: hsl.s\n            l: hsl.l\n        )\n    ]\n\nColor.tetrad = (color) ->\n    hsl = (new Color color).toHsl()\n    h = hsl.h\n    [\n        new Color(color),\n        new Color(\n            h: (h + 90) % 360\n            s: hsl.s\n            l: hsl.l\n        ),\n        new Color(\n            h: (h + 180) % 360\n            s: hsl.s\n            l: hsl.l\n        ),\n        new Color(\n            h: (h + 270) % 360\n            s: hsl.s\n            l: hsl.l\n        )\n    ]\n\nColor.splitcomplement = (color) ->\n    hsl = (new Color color).toHsl()\n    h = hsl.h\n    [\n        new Color(color),\n        new Color(\n            h: (h + 72) % 360\n            s: hsl.s\n            l: hsl.l\n        ),\n        new Color(\n            h: (h + 216) % 360\n            s: hsl.s\n            l: hsl.l\n        )\n    ]\n\nColor.analogous = (color, results=6, slices=30) ->\n    hsl = (new Color color).toHsl()\n    part = 360 / slices\n    ret = [new Color(color)]\n    hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360\n    while --results\n        hsl.h = (hsl.h + part) % 360\n        ret.push(new Color hsl)\n    ret\n\nColor.monochromatic = (color, results=6) ->\n    hsv = (new Color color).toHsv()\n    h = hsv.h\n    s = hsv.s\n    v = hsv.v\n    ret = []\n    modification = 1 / results\n    while results--\n        ret.push Color(\n            h: h\n            s: s\n            v: v\n        )\n        v = (v + modification) % 1\n    ret\n\nColor.readability = (color1, color2) ->\n    a = (new Color color1).toRgb()\n    b = (new Color color2).toRgb()\n    brightnessA = (a.r * 299 + a.g * 587 + a.b * 114) / 1000\n    brightnessB = (b.r * 299 + b.g * 587 + b.b * 114) / 1000\n    colorDiff = (Math.max(a.r, b.r) - Math.min(a.r, b.r) + Math.max(a.g, b.g) - Math.min(a.g, b.g) + Math.max(a.b, b.b) - Math.min(a.b, b.b))\n    \n    brightness: Math.abs(brightnessA - brightnessB)\n    color: colorDiff\n\nColor.readable = (color1, color2) ->\n    readability = Color.readability(color1, color2)\n    readability.brightness > 125 and readability.color > 500\n\nColor.mostReadable = (baseColor, colorList) ->\n    bestColor = null\n    bestScore = 0\n    bestIsReadable = false\n    i = 0\n\n    while i < colorList.length\n        readability = Color.readability(baseColor, colorList[i])\n        readable = readability.brightness > 125 and readability.color > 500\n        score = 3 * (readability.brightness / 125) + (readability.color / 500)\n        if (readable and not bestIsReadable) or (readable and bestIsReadable and score > bestScore) or ((not readable) and (not bestIsReadable) and score > bestScore)\n            bestIsReadable = readable\n            bestScore = score\n            bestColor = new Color colorList[i]\n        i++\n    bestColor","###\nInspired by Font.js by  Mike \"Pomax\" Kamermans\n@see http://github.com/Pomax/Font.js\n###\n\nMathmetics = require \"../math/math\"\nEvents = require \"../core/events/dispatcher\"\n\nFONT_CACHE = {}\nFONT_DEFAULTS =\n    fontFamily : 'Verdena'\n    fontSize : 12\n\n# decimal to character\nchr = (val) ->\n    String.fromCharCode val\n\n\n# decimal to ushort\nchr16 = (val) ->\n    return chr(0) + chr(val)    if val < 256\n    b1 = val >> 8\n    b2 = val & 0xFF\n    chr(b1) + chr(b2)\n\n\n# decimal to hexadecimal\n# See http://phpjs.org/functions/dechex:382\ndechex = (val) ->\n    val = 0xFFFFFFFF + val + 1    if val < 0\n    parseInt(val, 10).toString 16\n\n\n# unsigned short to decimal\nushort = (b1, b2) ->\n    256 * b1 + b2\n\n\n# signed short to decimal\nfword = (b1, b2) ->\n    negative = b1 >> 7 is 1\n    val = undefined\n    b1 = b1 & 0x7F\n    val = 256 * b1 + b2\n    \n    # positive numbers are already done\n    return val    unless negative\n    \n    # negative numbers need the two's complement treatment\n    val - 0x8000\n\n\n# unsigned long to decimal\nulong = (b1, b2, b3, b4) ->\n    16777216 * b1 + 65536 * b2 + 256 * b3 + b4\n\n\n###\nFont manipulations and measurement\n\n@note GameCore.exports.Utils.Font\n###\nmodule.exports = class Font extends Events\n    constructor: (options={})->\n        # the font resource URL\n        @url = options.url or options.src or \"\"\n\n        # if this is not specified, a random name is used\n        @fontFamily = if @url then options.fontFamily or \"font\" + Mathmetics.randomInt(0,999999) else FONT_DEFAULTS.fontFamily\n\n        @fontSize = options.fontSize or options.size or FONT_DEFAULTS.fontSize\n\n        # the font's format ('truetype' for TT-OTF or 'opentype' for CFF-OTF)\n        @format = options.format or \"\"\n\n        # the font's byte code\n        @data = options.data or \"\"\n\n        # custom font, implementing the letter 'A' as zero-width letter.\n        @base64 = \"AAEAAAAKAIAAAwAgT1MvMgAAAAAAAACsAAAAWGNtYXAA\" +\n            \"AAAAAAABBAAAACxnbHlmAAAAAAAAATAAAAAQaGVhZAAAA\" +\n            \"AAAAAFAAAAAOGhoZWEAAAAAAAABeAAAACRobXR4AAAAAA\" +\n            \"AAAZwAAAAIbG9jYQAAAAAAAAGkAAAACG1heHAAAAAAAAA\" +\n            \"BrAAAACBuYW1lAAAAAAAAAcwAAAAgcG9zdAAAAAAAAAHs\" +\n            \"AAAAEAAEAAEAZAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAABAAMAAQA\" +\n            \"AAAwABAAgAAAABAAEAAEAAABB//8AAABB////wAABAAAA\" +\n            \"AAABAAAAAAAAAAAAAAAAMQAAAQAAAAAAAAAAAABfDzz1A\" +\n            \"AAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAEAAg\" +\n            \"AAAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAQAAAAAAAAAAAAAAAAAIAAAAAQAAAAIAAQAB\" +\n            \"AAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAIAHgADAAEEC\" +\n            \"QABAAAAAAADAAEECQACAAIAAAAAAAEAAAAAAAAAAAAAAA\" +\n            \"AAAA==\"\n\n        ###\n        these metrics represent the font-indicated values,\n        not the values pertaining to text as it is rendered\n        on the page (use fontmetrics.js for this instead).\n        ###\n        @metrics =\n            quadsize: 0\n            leading: 0\n            ascent: 0\n            descent: 0\n            weightclass: 400\n\n        # Will this be a remote font, or a system font?\n        Object.defineProperty @, \"systemfont\",\n            get: ()->\n                if @_systemfont\n                    @_systemfont\n                else\n                    if @url then false else true\n            set: (oreally)->\n                @_systemfont = oreally\n\n        # internal indicator that the font is done loading\n        @loaded = false\n\n        # preassigned quad × quad context, for measurements\n        # @canvas = document.createElement('canvas') if not options.context or options.ctx\n        # @context = if not options.context or options.ctx then  @canvas.getContext('2d') else options.context or options.ctx\n        @canvas = false\n        @context = false\n\n        # The stylenode can be added to the document head\n        # to make the font available for on-page styling,\n        # but it should be requested with .toStyleNode()\n        @styleNode = false\n\n        ###\n        we want Font to do the same thing Image does when\n        we set the \"src\" property value, so we use the\n        Object.defineProperty function to bind a setter\n        that does more than just bind values.\n        ###\n        Object.defineProperty @, \"src\",\n            get: ()->\n                @url\n\n            set: (url) ->\n                @url = url\n                @loadFont()\n\n        @loadFont() if @url\n\n    ###\n    This function gets called once the font is done\n    loading, its metrics have been determined, and it\n    has been parsed for use on-page. By default, this\n    function does nothing, and users can bind their\n    own handler function.\n    ###\n    onload: ()->\n\n    ###\n    This function gets called when there is a problem\n    loading the font.\n    ###\n    onerror: ()->\n\n    ###\n    validation function to see if the zero-width styled\n    text is no longer zero-width. If this is true, the\n    font is properly done loading. If this is false, the\n    function calls itself via a timeout\n    ###\n    validate: (target, zero, mark, font, timeout) ->\n        if timeout isnt false and timeout < 0\n            @onerror() # @TODO: Error codes\n            throw new Error \"Requested system font '#{@fontFamily}' could not be loaded (it may not be installed).\"\n            return\n        computedStyle = document.defaultView.getComputedStyle(target, \"\")\n        width = computedStyle.getPropertyValue(\"width\").replace(\"px\", \"\")\n\n        # font has finished loading - remove the zero-width and\n        # validation paragraph, but leave the actual font stylesheet (mark);\n        if width > 0\n            document.head.removeChild zero\n            document.body.removeChild target\n            @loaded = true\n            @onload()\n\n        # font has not finished loading - wait 50ms and try again\n        else\n            setTimeout (->\n                font.validate target, zero, mark, font, (if timeout is false then false else timeout - 50)\n            ), 50\n\n    ###\n    This gets called when the file is done downloading.\n    ###\n    ondownloaded: ()->\n        instance = @\n        \n        # unified error handling\n        error = (msg) ->\n            instance.onerror msg\n        \n        # we know about TTF (0x00010000) and CFF ('OTTO') fonts\n        ttf = chr(0) + chr(1) + chr(0) + chr(0)\n        cff = 'OTTO'\n        woff = 'wOFF'\n\n        # so what kind of font is this?\n        data = @data\n        version = chr(data[0]) + chr(data[1]) + chr(data[2]) + chr(data[3])\n        isTTF = (version is ttf)\n        isCFF = ((if isTTF then false else version is cff))\n        isWOFF= ((if isCFF or isTTF then false else version is woff))\n\n        if isTTF\n            @format = \"truetype\"\n        else if isCFF\n            @format = \"opentype\"\n        else if isWOFF\n            @format = \"woff\"\n        \n        # terminal error: stop running code\n        else\n            throw new Error \"Error: file at #{@url} cannot be interpreted as OpenType font.\"\n            return\n        \n        # ================================================================\n        # if we get here, this is a legal font. Extract some font metrics,\n        # and then wait for the font to be available for on-page styling.\n        # ================================================================\n        \n        printChar = if @format is 'truetype' or @format is 'opentype' then @_verifyTTForOTF data else 'A'\n\n        @bootstrapValidation printChar\n    \n    _verifyTTForOTF: (data)->\n        # first, we parse the SFNT header data\n        numTables = ushort(data[4], data[5])\n        tagStart = 12\n        ptr = undefined\n        end = tagStart + 16 * numTables\n        tags = {}\n        tag = undefined\n        ptr = tagStart\n        while ptr < end\n            tag = chr(data[ptr]) + chr(data[ptr + 1]) + chr(data[ptr + 2]) + chr(data[ptr + 3])\n            tags[tag] =\n                name: tag\n                checksum: ulong(data[ptr + 4], data[ptr + 5], data[ptr + 6], data[ptr + 7])\n                offset: ulong(data[ptr + 8], data[ptr + 9], data[ptr + 10], data[ptr + 11])\n                length: ulong(data[ptr + 12], data[ptr + 13], data[ptr + 14], data[ptr + 15])\n            ptr += 16\n        \n        # first we define a quick error shortcut function:\n        checkTableError = (tag) ->\n            unless tags[tag]\n                throw new Error \"Error: font is missing the required OpenType '#{tag}' table.\"\n                \n                # return false, so that the result of this function can be used to stop running code\n                return false\n            tag\n\n        \n        # Then we access the HEAD table for the \"font units per EM\" value.\n        tag = checkTableError(\"head\")\n        return    if tag is false\n        ptr = tags[tag].offset\n        tags[tag].version = \"\" + data[ptr] + data[ptr + 1] + data[ptr + 2] + data[ptr + 3]\n        unitsPerEm = ushort(data[ptr + 18], data[ptr + 19])\n        @metrics.quadsize = unitsPerEm\n        \n        # We follow up by checking the HHEA table for ascent, descent, and leading values.\n        tag = checkTableError(\"hhea\")\n        return    if tag is false\n        ptr = tags[tag].offset\n        tags[tag].version = \"\" + data[ptr] + data[ptr + 1] + data[ptr + 2] + data[ptr + 3]\n        @metrics.ascent = fword(data[ptr + 4], data[ptr + 5]) / unitsPerEm\n        @metrics.descent = fword(data[ptr + 6], data[ptr + 7]) / unitsPerEm\n        @metrics.leading = fword(data[ptr + 8], data[ptr + 9]) / unitsPerEm\n        \n        # And then finally we check the OS/2 table for the font-indicated weight class.\n        tag = checkTableError(\"OS/2\")\n        return    if tag is false\n        ptr = tags[tag].offset\n        tags[tag].version = \"\" + data[ptr] + data[ptr + 1]\n        @metrics.weightclass = ushort(data[ptr + 4], data[ptr + 5])\n        \n        # ==================================================================\n        # Then the mechanism for determining whether the font is not\n        # just done downloading, but also fully parsed and ready for\n        # use on the page for typesetting: we pick a letter that we know\n        # is supported by the font, and generate a font that implements\n        # only that letter, as a zero-width glyph. We can then test\n        # whether the font is available by checking whether a paragraph\n        # consisting of just that letter, styled with \"desiredfont, zwfont\"\n        # has zero width, or a real width. As long as it's zero width, the\n        # font has not finished loading yet.\n        # ==================================================================\n        \n        # To find a letter, we must consult the character map (\"cmap\") table\n        tag = checkTableError(\"cmap\")\n        return    if tag is false\n        ptr = tags[tag].offset\n        tags[tag].version = \"\" + data[ptr] + data[ptr + 1]\n        numTables = ushort(data[ptr + 2], data[ptr + 3])\n        \n        # For the moment, we only look for windows/unicode records, with\n        # a cmap subtable format 4 because OTS (the sanitiser used in\n        # Chrome and Firefox) does not actually support anything else\n        # at the moment.\n        #\n        # When http://code.google.com/p/chromium/issues/detail?id=110175\n        # is resolved, remember to stab me to add support for the other\n        # maps, too.\n        #\n        encodingRecord = undefined\n        rptr = undefined\n        platformID = undefined\n        encodingID = undefined\n        offset = undefined\n        cmap314 = false\n        encodingRecord = 0\n\n        while encodingRecord < numTables\n            rptr = ptr + 4 + encodingRecord * 8\n            platformID = ushort(data[rptr], data[rptr + 1])\n            encodingID = ushort(data[rptr + 2], data[rptr + 3])\n            offset = ulong(data[rptr + 4], data[rptr + 5], data[rptr + 6], data[rptr + 7])\n            cmap314 = offset    if platformID is 3 and encodingID is 1\n            encodingRecord++\n        \n        # This is our fallback font - a minimal font that implements\n        # the letter \"A\". We can transform this font to implementing\n        # any character between 0x0000 and 0xFFFF by altering a\n        # handful of letters.\n        printChar = \"A\"\n        \n        # Now, if we found a format 4 {windows/unicode} cmap subtable,\n        # we can find a suitable glyph and modify the 'base64' content.\n        if cmap314 isnt false\n            ptr += cmap314\n            version = ushort(data[ptr], data[ptr + 1])\n            if version is 4\n                \n                # First find the number of segments in this map\n                segCount = ushort(data[ptr + 6], data[ptr + 7]) / 2\n                \n                # Then, find the segment end characters. We'll use\n                # whichever of those isn't a whitespace character\n                # for our verification font, which we check based\n                # on the list of Unicode 6.0 whitespace code points:\n                printable = (chr) ->\n                    [0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x0020, 0x0085, 0x00A0, 0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x2028, 0x2029, 0x202F, 0x205F, 0x3000].indexOf(chr) is -1\n\n                \n                # Loop through the segments in search of a usable character code:\n                i = ptr + 14\n                e = ptr + 14 + 2 * segCount\n                endChar = false\n                while i < e\n                    endChar = ushort(data[i], data[i + 1])\n                    break    if printable(endChar)\n                    endChar = false\n                    i += 2\n                if endChar isnt false\n                    \n                    # We now have a printable character to validate with!\n                    # We need to make sure to encode the correct \"idDelta\"\n                    # value for this character, because our \"glyph\" will\n                    # always be at index 1 (index 0 is reserved for .notdef).\n                    # As such, we need to set up a delta value such that:\n                    #\n                    # [character code] + [delta value] == 1\n                    #\n                    printChar = String.fromCharCode(endChar)\n                    delta = -(endChar - 1) + 65536\n                    \n                    # Now we need to substitute the values in our\n                    # base64 font template. The CMAP modification\n                    # consists of generating a new base64 string\n                    # for the bit that indicates the encoded char.\n                    # In our 'A'-encoding font, this is:\n                    #\n                    # 0x00 0x41 0xFF 0xFF 0x00 0x00\n                    # 0x00 0x41 0xFF 0xFF 0xFF 0xC0\n                    #\n                    # which is the 20 letter base64 string at [380]:\n                    #\n                    # AABB//8AAABB////wAAB\n                    #\n                    # We replace this with our new character:\n                    #\n                    # [hexchar] 0xFF 0xFF 0x00 0x00\n                    # [hexchar] 0xFF 0xFF [ delta ]\n                    #\n                    # Note: in order to do so properly, we need to\n                    # make sure that the bytes are base64 aligned, so\n                    # we have to add a leading 0x00:\n                    # base64 padding byte\n                    # \"endCount\" array\n                    # cmap required padding\n                    # \"startCount\" array\n                    # delta value\n                    newhex = btoa(chr(0) + chr16(endChar) + chr16(0xFFFF) + chr16(0) + chr16(endChar) + chr16(0xFFFF) + chr16(delta) + chr16(1)) # delta terminator\n                    \n                    # And now we replace the text in 'base64' at\n                    # position 380 with this new base64 string:\n                    @base64 = @base64.substring(0, 380) + newhex + @base64.substring(380 + newhex.length)\n        printChar\n\n    bootstrapValidation: (printChar, timeout=false) ->\n\n        # Create a stylesheet for using the zero-width font:\n        tfName = @fontFamily + \" testfont\"\n        zerowidth = document.createElement(\"style\")\n        zerowidth.setAttribute \"type\", \"text/css\"\n        zerowidth.innerHTML = \"@font-face {\\n\" + \" font-family: '\" + tfName + \"';\\n\" + \" src: url('data:application/x-font-ttf;base64,\" + @base64 + \"')\\n\" + \" format('truetype');}\"\n        document.head.appendChild zerowidth\n        \n        # Create a validation stylesheet for the requested font, if it's a remote font:\n        realfont = false\n        unless @systemfont\n            realfont = @toStyleNode()\n            document.head.appendChild realfont\n        \n        # Create a validation paragraph, consisting of the zero-width character\n        para = document.createElement(\"p\")\n        para.style.cssText = \"position: absolute; top: 0; left: 0; opacity: 0;\"\n        para.style.fontFamily = \"'\" + @fontFamily + \"', '\" + tfName + \"'\"\n        para.innerHTML = printChar + printChar + printChar + printChar + printChar + printChar + printChar + printChar + printChar + printChar\n        document.body.appendChild para\n        \n        # Quasi-error: if there is no getComputedStyle, claim loading is done.\n        unless document.defaultView.getComputedStyle\n            @onload()\n            error \"Error: document.defaultView.getComputedStyle is not supported by this browser.\\n\" + \"Consequently, Font.onload() cannot be trusted.\"\n        \n        # If there is getComputedStyle, we do proper load completion verification.\n        else\n            \n            # If this is a remote font, we rely on the indicated quad size\n            # for measurements. If it's a system font there will be no known\n            # quad size, so we simply fix it at 1000 pixels.\n            quad = (if @systemfont then 1000 else @metrics.quadsize)\n            \n            # Because we need to 'preload' a canvas with this\n            # font, we have no idea how much surface area\n            # we'll need for text measurements later on. So\n            # be safe, we assign a surface that is quad² big,\n            # and then when measureText is called, we'll\n            # actually build a quick <span> to see how much\n            # of that surface we don't need to look at.\n            canvas = document.createElement(\"canvas\")\n            canvas.width = quad\n            canvas.height = quad\n            @canvas = canvas\n            \n            # The reason we preload is because some browsers\n            # will also take a few milliseconds to assign a font\n            # to a Canvas2D context, so if measureText is called\n            # later, without this preloaded context, there is no\n            # time for JavaScript to \"pause\" long enough for the\n            # context to properly load the font, and metrics may\n            # be completely wrong. The solution is normally to\n            # add in a setTimeout call, to give the browser a bit\n            # of a breather, but then we can't do synchronous\n            # data returns, and we need a callback just to get\n            # string metrics, which is about as far from desired\n            # as is possible.\n            context = canvas.getContext(\"2d\")\n            context.font = \"1em '\" + @fontFamily + \"'\"\n            context.fillStyle = \"white\"\n            context.fillRect -1, -1, quad + 2, quad + 2\n            context.fillStyle = \"black\"\n            context.fillText \"test text\", 50, quad / 2\n            @context = context\n            \n            # ===================================================\n            # Thanks to Opera and Firefox, we need to add in more\n            # \"you can do your thing, browser\" moments. If we\n            # call validate() as a straight function call, the\n            # browser doesn't get the breathing space to perform\n            # page styling. This is a bit mad, but until there's\n            # a JS function for \"make the browser update the page\n            # RIGHT NOW\", we're stuck with this.\n            # ===================================================\n            \n            # We need to alias \"this\" because the keyword \"this\"\n            # becomes the global context after the timeout.\n            local = @\n            delayedValidate = ->\n                local.validate para, zerowidth, realfont, local, timeout\n\n            setTimeout delayedValidate, 50\n\n    \n    ###\n    We take a different path for System fonts, because\n    we cannot inspect the actual byte code.\n    ###\n    processSystemFont: ()->\n        \n        # Mark system font use-case\n        @systemfont = true\n        \n        # There are font-declared metrics to work with.\n        @metrics = false\n        \n        # However, we do need to check whether the font\n        # is actually installed.\n        @bootstrapValidation \"A\", 1000\n\n    \n    ###\n    This gets called when font.src is set, (the binding\n    for which is at the end of this file).\n    ###\n    loadFont: ()->\n        font = @\n        \n        # System font?\n        if @url.indexOf(\".\") is -1\n            setTimeout (->\n                font.processSystemFont()\n            ), 10\n            return\n        \n        # Remote font.\n        xhr = new XMLHttpRequest()\n        xhr.open \"GET\", font.url, true\n        xhr.responseType = \"arraybuffer\"\n        xhr.onreadystatechange = (evt) ->\n            return unless xhr.readyState is 4\n            unless xhr.status is 200\n                throw new Error \"Can't load from #{@url}. Please, verify source urls.\"\n\n            arrayBuffer = xhr.response\n            if arrayBuffer\n                font.data = new Uint8Array(arrayBuffer)\n                font.ondownloaded()\n            else\n                font.onerror \"Error downloading font resource from \" + font.url\n\n        xhr.send(null)\n\n    \n    ###\n    Get the DOM node associated with this Font\n    object, for page-injection.\n    ###\n    toStyleNode: ()->\n        \n        # If we already built it, pass that reference.\n        return @styleNode    if @styleNode\n        \n        # If not, build a style element\n        @styleNode = document.createElement(\"style\")\n        @styleNode.type = \"text/css\"\n        styletext = \"@font-face {\\n\"\n        styletext += \" font-family: '#{@fontFamily}';\\n\"\n        styletext += \" src: local('#{@fontFamily}'), url('#{@url}') format('#{@format}');\\n\"\n        styletext += \"}\"\n        @styleNode.innerHTML = styletext\n        @styleNode\n\n    \n    ###\n    Measure a specific string of text, given this font.\n    If the text is too wide for our preallocated canvas,\n    it will be chopped up and the segments measured\n    separately.\n    ###\n    measureText: (textString) ->\n        \n        # error shortcut\n        unless @loaded and not @systemfont\n            throw new Error \"measureText() was called while the font was not yet loaded\"\n            return false\n        \n        # Set up the right font size.\n        @context.font = @.toString()\n        \n        # Get the initial string width through our preloaded Canvas2D context\n        metrics = @context.measureText(textString)\n        \n        # Assign the remaining default values, because the\n        # TextMetrics object is horribly deficient.\n        metrics.fontsize = @fontSize\n        metrics.ascent = 0\n        metrics.descent = 0\n        metrics.bounds =\n            minx: 0\n            maxx: metrics.width\n            miny: 0\n            maxy: 0\n\n        metrics.height = 0\n        \n        # Does the text fit on the canvas? If not, we have to\n        # chop it up and measure each segment separately.\n        segments = []\n        minSegments = metrics.width / @metrics.quadsize\n        if minSegments <= 1\n            segments.push textString\n        else\n            \n            # TODO: add the chopping code here. For now this\n            # code acts as placeholder\n            segments.push textString\n        \n        # run through all segments, updating the metrics as we go.\n        segmentLength = segments.length\n        i = undefined\n        i = 0\n        while i < segmentLength\n            @measureSegment segments[i], metrics\n            i++\n        metrics\n\n    \n    ###\n    Measure a section of text, given this font, that is\n    guaranteed to fit on our preallocated canvas.\n    ###\n    measureSegment: (textSegment, metrics) ->\n        \n        # Shortcut function for getting computed CSS values\n        getCSSValue = (element, property) ->\n            document.defaultView.getComputedStyle(element, null).getPropertyValue property\n\n        \n        # We are going to be using you ALL over the place, little variable.\n        i = undefined\n        \n        # For text leading values, we measure a multiline\n        # text container as built by the browser.\n        leadDiv = document.createElement(\"div\")\n        leadDiv.style.position = \"absolute\"\n        leadDiv.style.opacity = 0\n        leadDiv.style.font = @.toString()\n        numLines = 10\n        leadDiv.innerHTML = textSegment\n        i = 1\n        while i < numLines\n            leadDiv.innerHTML += \"<br/>\" + textSegment\n            i++\n        document.body.appendChild leadDiv\n        \n        # First we guess at the leading value, using the standard TeX ratio.\n        metrics.leading = 1.2 * @fontSize\n        \n        # We then try to get the real value based on how\n        # the browser renders the text.\n        leadDivHeight = getCSSValue(leadDiv, \"height\")\n        leadDivHeight = leadDivHeight.replace(\"px\", \"\")\n        metrics.leading = (leadDivHeight / numLines) | 0    if leadDivHeight >= @fontSize * numLines\n        document.body.removeChild leadDiv\n        \n        # If we're not with a white-space-only string,\n        # this is all we will be able to do.\n        return metrics    if /^\\s*$/.test(textSegment)\n        \n        # If we're not, let's try some more things.\n        canvas = @canvas\n        ctx = @context\n        quad = (if @systemfont then 1000 else @metrics.quadsize)\n        w = quad\n        h = quad\n        baseline = quad / 2\n        padding = 50\n        xpos = (quad - metrics.width) / 2\n        \n        # SUPER IMPORTANT, HARDCORE NECESSARY STEP:\n        # xpos may be a fractional number at this point, and\n        # that will *complete* screw up line scanning, because\n        # cropping a canvas on fractional coordiantes does\n        # really funky edge interpolation. As such, we force\n        # it to an integer.\n        xpos = xpos | 0    if xpos isnt (xpos | 0)\n        \n        # Set all canvas pixeldata values to 255, with all the content\n        # data being 0. This lets us scan for data[i] != 255.\n        ctx.fillStyle = \"white\"\n        ctx.fillRect -padding, -padding, w + 2 * padding, h + 2 * padding\n        \n        # Then render the text centered on the canvas surface.\n        ctx.fillStyle = \"black\"\n        ctx.fillText textSegment, xpos, baseline\n        \n        # Rather than getting all four million+ subpixels, we\n        # instead get a (much smaller) subset that we know\n        # contains our text. Canvas pixel data is w*4 by h*4,\n        # because {R,G,B,A} is stored as separate channels in\n        # the array. Hence the factor 4.\n        scanwidth = (metrics.width + padding) | 0\n        scanheight = 4 * @fontSize\n        x_offset = xpos - padding / 2\n        y_offset = baseline - scanheight / 2\n        pixelData = ctx.getImageData(x_offset, y_offset, scanwidth, scanheight).data\n        \n        # Set up our scanline variables\n        i = 0\n        j = 0\n        w4 = scanwidth * 4\n        len = pixelData.length\n        mid = scanheight / 2\n        \n        # Scan 1: find the ascent using a normal, forward scan\n        continue    while ++i < len and pixelData[i] is 255\n        ascent = (i / w4) | 0\n        \n        # Scan 2: find the descent using a reverse scan\n        i = len - 1\n        continue    while --i > 0 and pixelData[i] is 255\n        descent = (i / w4) | 0\n        \n        # Scan 3: find the min-x value, using a forward column scan\n        i = 0\n        j = 0\n\n        while j < scanwidth and pixelData[i] is 255\n            i += w4\n            if i >= len\n                j++\n                i = (i - len) + 4\n        minx = j\n        \n        # Scan 3: find the max-x value, using a reverse column scan\n        step = 1\n        i = len - 3\n        j = 0\n\n        while j < scanwidth and pixelData[i] is 255\n            i -= w4\n            if i < 0\n                j++\n                i = (len - 3) - (step++) * 4\n        maxx = scanwidth - j\n        \n        # We have all our metrics now, so fill in the\n        # metrics object and return it to the user.\n        metrics.ascent = (mid - ascent)\n        metrics.descent = (descent - mid)\n        metrics.bounds =\n            minx: minx - (padding / 2)\n            maxx: maxx - (padding / 2)\n            miny: -metrics.descent\n            maxy: metrics.ascent\n\n        metrics.height = 1 + (descent - ascent)\n        metrics\n\n    toString: ()->\n        \"#{@fontSize}px '#{@fontFamily}'\"\n\n","class Loader\n    \n    \nmodule.exports = Loader","Vector2d = require \"../math/vector2d\"\n\nclass MouseCursor\n    constructor: (@mouse, @x=-1,@y=-1)->\n    handleEvent: (e)->\n        console.log e\n        @x = e.offsetX * @mouse.core.stage.viewport.scale.x;\n        @y = e.offsetY * @mouse.core.stage.viewport.scale.y;\n        # Mouse.collider.updateColliderPosition(J.currentEngine.currentScene.viewport.position);\n\n\nMouseEvents = \n    ###\n    Events.MOUSE_DOWN\n    @type {String}\n    @static\n    @final\n    ###\n    MOUSE_DOWN: \"mousedown\"\n    \n    ###\n    Events.MOUSE_UP\n    @type {String}\n    @static\n    @final\n    ###\n    MOUSE_UP: \"mouseup\"\n    \n    ###\n    Events.MOUSE_MOVE\n    @type {String}\n    @static\n    @final\n    ###\n    MOUSE_MOVE: \"mousemove\"\n    \n    ###\n    Events.CLICK\n    @type {String}\n    @static\n    @final\n    ###\n    CLICK: \"click\"\n    \n    ###\n    Events.DOUBLE_CLICK\n    @type {String}\n    @static\n    @final\n    ###\n    DOUBLE_CLICK: \"dblclick\"\n    \n    ###\n    TODO: not implemented yet\n    only available attaching Joy.Behaviour.Button behaviour\n    \n    Events.MOUSE_OVER\n    @type {String}\n    @static\n    @final\n    ###\n    MOUSE_OVER: \"mouseover\"\n\n\n\nmodule.exports = class Mouse\n    ###\n    ###\n    constructor: (@core)->\n        if @core.mouse\n            throw new Error \"Mouse already attached to this core. Only one instance of mouse is allowed.\"\n            return @core.mouse\n\n        @core.mouse = @\n\n        @handlers = {}\n\n        @cursor = new MouseCursor @, -1, -1\n        @lastEvent = null\n        \n        a = @\n        @updateColliderPosition = (e) ->\n            Mouse.collider.position.x = e.offsetX * J.currentEngine.currentScene.viewport.scale.x\n            Mouse.collider.position.y = e.offsetY * J.currentEngine.currentScene.viewport.scale.y\n            Mouse.collider.updateColliderPosition J.currentEngine.currentScene.viewport.position\n\n        @addHandler = (eventType)->\n            # console.log a, @, eventType\n            a.handlers[eventType] = []\n            a.core.renderer[\"on\" + eventType] = a.triggerMouseEvents()\n\n        @addHandler eventType for eventType in [ MouseEvents.CLICK, \n            MouseEvents.DOUBLE_CLICK, MouseEvents.MOUSE_MOVE, \n            MouseEvents.MOUSE_DOWN, MouseEvents.MOUSE_UP ]\n\n    triggerMouseEvents: ()->\n        mi = @\n        (e) ->\n            # console.log @, mi, e, Mouse.handlers\n            handlers = mi.handlers[e.type]\n            mi.lastEvent = e\n            mi.cursor.handleEvent e\n            # mi. e\n            i = 0\n            length = handlers.length\n            while i < length\n                handlers[i].handler.apply handlers[i].target, [e] if handlers[i].target.visible and mi.isOver(handlers[i].target)\n                ++i\n\n    isOver: (target)->\n        console.log target, @cursor\n","###\n@note Inspired by CreateJS/TweenJS\n\nA collection of Classes that are shared across all the CreateJS libraries.  The classes are included in the minified\nfiles of each library and are available on the createsjs namespace directly.\n\n@example\n    #myObject.addEventListener \"change\", createjs.proxy(myMethod, scope)\n\n@module CreateJS\n@main CreateJS\n\n###\nclass Event\n    ###\n    The type of event.\n    @property type\n    @type String\n    ###\n    type = null\n\n    ###\n    The object that generated an event.\n    @property target\n    @type Object\n    @default null\n    @readonly\n    ###\n    target = null\n\n    ###\n    The current target that a bubbling event is being dispatched from. For non-bubbling events, this will\n    always be the same as target. For example, if childObj.parent = parentObj, and a bubbling event\n    is generated from childObj, then a listener on parentObj would receive the event with\n    target=childObj (the original target) and currentTarget=parentObj (where the listener was added).\n    @property currentTarget\n    @type Object\n    @default null\n    @readonly\n    ###\n    currentTarget = null\n\n    ###\n    For bubbling events, this indicates the current event phase:<OL>\n    <LI> capture phase: starting from the top parent to the target</LI>\n    <LI> at target phase: currently being dispatched from the target</LI>\n    <LI> bubbling phase: from the target to the top parent</LI>\n    </OL>\n\n    @property eventPhase\n    @type Number\n    @default 0\n    @readonly\n    ###\n    eventPhase = 0\n\n    ###\n    Indicates whether the event will bubble through the display list.\n    @property bubbles\n    @type Boolean\n    @default false\n    @readonly\n    ###\n    bubbles = false\n\n    ###\n    Indicates whether the default behaviour of this event can be cancelled via\n    {{#crossLink \"Event/preventDefault\"}}{{/crossLink}}. This is set via the Event constructor.\n    @property cancelable\n    @type Boolean\n    @default false\n    @readonly\n    ###\n    cancelable = false\n\n    ###\n    The epoch time at which this event was created.\n    @property timeStamp\n    @type Number\n    @default 0\n    @readonly\n    ###\n    timeStamp = 0\n\n    ###\n    Indicates if {{#crossLink \"Event/preventDefault\"}}{{/crossLink}} has been called\n    on this event.\n    @property defaultPrevented\n    @type Boolean\n    @default false\n    @readonly\n    ###\n    defaultPrevented = false\n\n    ###\n    Indicates if {{#crossLink \"Event/stopPropagation\"}}{{/crossLink}} or\n    {{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called on this event.\n    @property propagationStopped\n    @type Boolean\n    @default false\n    @readonly\n    ###\n    propagationStopped = false\n\n    ###\n    Indicates if {{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called\n    on this event.\n    @property immediatePropagationStopped\n    @type Boolean\n    @default false\n    @readonly\n    ###\n    immediatePropagationStopped = false\n\n    ###\n    Indicates if {{#crossLink \"Event/remove\"}}{{/crossLink}} has been called on this event.\n    @property removed\n    @type Boolean\n    @default false\n    @readonly\n    ###\n    removed = false\n\n    ###\n    Initialization method.\n    @method constructor\n    @param {String} type The event type.\n    @param {Boolean} bubbles Indicates whether the event will bubble through the display list.\n    @param {Boolean} cancelable Indicates whether the default behaviour of this event can be cancelled.\n    @protected\n    ###\n    constructor: (@type, @bubbles, @cancelable) ->\n        @timeStamp = (new Date()).getTime()\n\n    ###\n    Sets {{#crossLink \"Event/defaultPrevented\"}}{{/crossLink}} to true.\n    Mirrors the DOM event standard.\n    @method preventDefault\n    ###\n    preventDefault: ->\n        @defaultPrevented = true\n\n\n    ###\n    Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} to true.\n    Mirrors the DOM event standard.\n    @method stopPropagation\n    ###\n    stopPropagation: ->\n        @propagationStopped = true\n\n\n    ###\n    Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} and\n    {{#crossLink \"Event/immediatePropagationStopped\"}}{{/crossLink}} to true.\n    Mirrors the DOM event standard.\n    @method stopImmediatePropagation\n    ###\n    stopImmediatePropagation: ->\n        @immediatePropagationStopped = @propagationStopped = true\n\n\n    ###\n    Causes the active listener to be removed via removeEventListener();\n    \n    @example\n        myBtn.addEventListener \"click\", (evt)->\n            # do stuff...\n            evt.remove() # removes this listener.\n\n    @method remove\n    ###\n    remove: ->\n        @removed = true\n\n\n    ###\n    Returns a clone of the Event instance.\n    @method clone\n    @return {Event} a clone of the Event instance.\n    ###\n    clone: ->\n        new Event(@type, @bubbles, @cancelable)\n\n\n    ###\n    Returns a string representation of this object.\n    @method toString\n    @return {String} a string representation of the instance.\n    ###\n    toString: ->\n        \"<Event (type=\" + @type + \")>\"\n\nmodule.exports = Event","Widget = require \"../widget\"\n\nmodule.exports = class Circle extends Widget\n    constructor: (options={})->\n        super options\n\n    _render: (ctx)->\n        ctx.beginPath()\n        ctx.arc @radius, @radius, @radius, 0, 2 * Math.PI\n        ctx.fillStyle = @color.toString()\n        ctx.fill()\n\n\n    \n","Widget = require \"../widget\"\n\nmodule.exports = class Rect extends Widget\n    constructor: (options={})->\n        super options\n\n        Object.defineProperty this, \"color\",\n            get: ->\n                if not @_color\n                    @color = options.color or DEFAULT_COLOR\n\n                @_color\n\n            set: (color) ->\n                @_color = if typeof color is \"string\" then new Color(color) else color\n                @alpha = @_color.a\n\n            configurable: true\n\n    _render: (ctx)->\n        ctx.fillStyle = @color.toString() if @color\n        ctx.fillRect 0, 0, @width, @height\n"],"sourceRoot":"webpack-module://"}